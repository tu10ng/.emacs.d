#+STARTUP: content nohideblocks
#+PROPERTY: header-args :results output none

* main mode package
#+begin_src emacs-lisp
(use-package fish-mode)
(use-package fish-completion)
(global-fish-completion-mode)

(use-package lox-mode)
(use-package php-mode)
(use-package crontab-mode)
(use-package graphviz-dot-mode)
(use-package json-mode)
(use-package csharp-mode)
(use-package gnuplot)
(use-package peg)
(use-package nasm-mode)

(require 'sql)
(defalias 'sql-get-login 'ignore)

(use-package sqlup-mode)
(add-hook 'sql-mode-hook #'sqlup-mode)

(use-package python
  :custom
  (python-indent-guess-indent-offset-verbose nil))

;; python -m venv ENV_DIR
(use-package pyvenv
  :commands pyvenv-deactivate pyvenv-deactivate)

;; scheme
(use-package geiser)
(use-package geiser-guile)
(use-package geiser-mit)

(setq geiser-active-implementations '(guile))
(setq geiser-mode-start-repl-p t)
(setq geiser-mode-eval-last-sexp-to-buffer t)     
(setq geiser-mode-eval-to-buffer-prefix "\n;;=> ")

(use-package ripgrep)

;; dired
(setq dired-kill-when-opening-new-dired-buffer t
      dired-auto-revert-buffer #'dired-directory-changed-p
      dired-hide-details-hide-symlink-targets nil)
(setq dired-listing-switches "-AFhlv")  ;wt

(use-package rst
  :ensure nil
  :hook ((rst-mode . visual-line-mode)
         (rst-adjust . rst-toc-update)))

#+end_src
* plain tweak
** simple tweak package
#+begin_src emacs-lisp
(use-package try)
(use-package restart-emacs)
(use-package eglot)
(use-package consult-eglot)

(use-package quickrun
  :bind ("C-c r" . quickrun)
  :bind ("C-c C-r" . quickrun)
  )
(setq quickrun-timeout-seconds 5)

(require 'server)
(or (eq (server-running-p) t)
    (server-start))

(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	    which-key-idle-secondary-delay 0
	    which-key-sort-order 'which-key-prefix-then-key-order
	    ))

(use-package info-colors
  :hook (Info-selection-hook . info-colors-fontify-node))
(use-package info-rename-buffer)
(info-rename-buffer-mode 1)

(use-package tldr)

;; Browse devdoc.io
(use-package devdocs
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex)))))

(use-package editorconfig)
(editorconfig-mode 1)

(use-package wakatime-mode)
(setq wakatime-disable-on-error t)

(global-wakatime-mode 1) 

(use-package gcmh)
(setq gcmh-high-cons-threshold (* 1024 1024 1024))
(gcmh-mode 1)

(use-package delsel
  :config
  (delete-selection-mode))

(use-package saveplace
  :hook (after-init . save-place-mode))

(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))

(setq make-backup-files nil)

(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save/") ; add auto-save to your load-path
(require 'auto-save)
(setq auto-save-silent t)   ; quietly save
(setq auto-save-delete-trailing-whitespace nil)  ; automatically delete spaces at the end of the line when saving
;; (setq auto-save-disable-predicates
;;       '((lambda ()
;;       (string-suffix-p
;;       "gpg"
;;       (file-name-extension (buffer-name)) t))))

(auto-save-enable)

(use-package recentf
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '( ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))

;; persist history over emacs restarts.
(use-package savehist
  :init (savehist-mode))


#+end_src
** misc emacs config
*** st
#+begin_src emacs-lisp
(setq eww-search-prefix "https://www.google.com/search?q=")

(setq url-proxy-services 
      '(("http" . "127.0.0.1:8889")
        ("https" . "127.0.0.1:8889"))
      )

(line-number-mode nil)
(setq  line-move-ignore-invisible t
       next-line-add-newlines t)
(set-default 'truncate-lines t)


(setq garbage-collection-messages nil
      large-file-warning-threshold nil
      confirm-kill-processes nil
      shift-select-mode nil
      shell-command-prompt-show-cwd 1)

(setq initial-scratch-message nil
      initial-buffer-choice nil)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)
(defun startup-echo-area-message ()
  (if (daemonp)
      ""
    (substitute-command-keys
     "")))

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq create-lockfiles nil
      load-prefer-newer t)

(setq inhibit-compacting-font-caches t)

(setq word-wrap-by-category t)

(setq initial-scratch-message "")
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; key repeat delay through /usr/bin/xset
;; auto repeat delay, repeat rate
;; set to xset r rate 180 30
;; from 500 20

(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=20")
(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

(setq use-short-answers t)

(fset 'list-buffers 'ibuffer)

(setq y-or-n-p-use-read-key t
      read-char-choice-use-read-key t)

(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq process-adaptive-read-buffering nil)
(setq use-dialog-box nil)
(setq-default
 fill-column 79
 indent-tabs-mode nil
 tab-width 4
 truncate-partial-width-windows nil
 sentence-end-double-space nil)

(setq ring-bell-function 'ignore)
(global-subword-mode 1)
#+END_SRC

*** scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-step 2
      ;; scroll-margin 2
      ;; hscroll-step 2
      ;; hscroll-margin 2
      scroll-conservatively 0)
;;      scroll-preserve-screen-position 'always

#+END_SRC
** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
;; (pyim-default-scheme 'pyim-shuangpin)
;; (pyim-default-scheme 'xiaohe-shuangpin)
;; (if (posframe-workable-p)
;;     (setq pyim-page-tooltip 'posframe)
;;   (setq pyim-page-tooltip 'popup))
(setq pyim-page-length 7)
(setq pyim-cloudim 'google)
(setq pyim-process-async-delay 0.1
      pyim-process-run-delay 0.1)
;; (setq pyim-indicator-list (list #'pyim-indicator-with-posframe))
(setq pyim-indicator-list nil)
;; (setq pyim-punctuation-half-width-functions t)
(setq pyim-punctuation-dict nil)        ;disable chinese punctuation.

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
(add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-tsinghua-dict")
(require 'pyim-tsinghua-dict)
(pyim-tsinghua-dict-enable)
(require 'pyim-cstring-utils)
;; (keymap-set 'global-key-map "<remap> <forward-word>" 'pyim-forward-word)
;; (global-set-key (kbd "M-f") 'pyim-forward-word)
;; (global-set-key (kbd "M-b") 'pyim-backward-word)

(defun my-orderless-regexp (orig-func component)
  (let ((result (funcall orig-func component)))
    (pyim-cregexp-build result)))

(advice-add 'orderless-regexp :around #'my-orderless-regexp)
#+end_src
** helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

(setq source-directory "/home/qb/Projects/emacs-git/")
(setq find-function-C-source-directory "/home/qb/Projects/emacs-git/src/")

#+end_src
* appearence mod
** simple ui package
#+begin_src emacs-lisp
(use-package all-the-icons)

#+end_src
** compile
#+begin_src emacs-lisp
;; Compilation Mode
(use-package compile
  :ensure nil
  :hook (compilation-filter . colorize-compilation-buffer)
  :config
  (defun colorize-compilation-buffer ()
    "ANSI coloring in compilation buffers."
    (with-silent-modifications
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  :custom
  (compilation-always-kill t)
  (compilation-scroll-output t)
  ;; Save all buffers on M-x `compile'
  (compilation-ask-about-save nil))


#+end_src
** dired
#+begin_src emacs-lisp
;; dired font lock
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))

(use-package prettify-greek)
(use-package prettify-math)
(setq-default prettify-symbols-alist prettify-greek-lower)
;;(global-prettify-symbols-mode 1)
;;(global-prettify-math-mode)
(dolist (hook '(prog-mode-hook
                shell-mode-hook
                text-mode-hook))
  (add-hook hook #'(lambda ()
                     (prettify-symbols-mode 1))))

#+end_src
** outfit
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
;;(toggle-frame-maximized)
;;(set-frame-parameter nil 'undecorated t)

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; (use-package tangotango-theme)
;; (enable-theme 'tangotango)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/lazycat-theme"))
(require 'lazycat-theme)
(lazycat-theme-load-dark)
(setq lazycat-dark-brighter-modeline t
      lazycat-dark-brighter-comments t
      lazycat-dark-comment-bg t
      lazycat-dark-padded-modeline t)

(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/awesome-tray"))
(require 'awesome-tray)

;; tree - show current dir with respect to git
;; in the top dir, show full path.
(defun tu10ng/awesome-tray-tree-info ()
  (let ((rst (substring (buffer-file-name)
                        (length (expand-file-name (magit-toplevel)))
                        (- (length (buffer-file-name)) (length (file-name-nondirectory (buffer-file-name)))))))
    (if (string-empty-p rst)
        (magit-toplevel)
      rst)))

(add-to-list 'awesome-tray-module-alist
             '("tree" . (tu10ng/awesome-tray-tree-info awesome-tray-module-file-path-face)))

(setq awesome-tray-active-modules       ;flycheck total,
      '("location" "belong" "mode-name" "buffer-name" "tree"
        "circe" "buffer-read-only"
	    "date"
	    )
      awesome-tray-update-interval 1
      awesome-tray-buffer-name-max-length 40
      awesome-tray-file-path-show-filename nil
      awesome-tray-file-path-truncated-name-length 40
      awesome-tray-file-path-full-dirname-levels 4)
(set-default 'awesome-tray-mode-line-active-color "DarkBlue")

;; should use hook
(defun tu10ng/set-mode-line-color-input-method ()
  (if (eq current-input-method nil)     ;if current english
      (set-face-attribute 'mode-line nil
                    :foreground "DarkBlue"
                    :background "DarkBlue")
    (set-face-attribute 'mode-line nil
                    :foreground "DarkRed"
                    :background "DarkRed")))
(defun tu10ng/toggle-input-method ()
  (interactive)
  (toggle-input-method)
  (tu10ng/set-mode-line-color-input-method))
(global-set-key (kbd "C-\\") 'tu10ng/toggle-input-method)

(awesome-tray-mode 1)
#+END_SRC
** visible mark
#+begin_src emacs-lisp
(defface visible-mark-face1
  '((((type tty) (class mono)))
    (t (:background "tan4")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face2
  '((((type tty) (class mono)))
    (t (:background "black")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)

(use-package visible-mark)
(global-visible-mark-mode 1)
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1
			               visible-mark-face2
			               ))
#+end_src
** rainbow delimiters(parenthesis)
((t
  (:weight ultra-bold :foreground "#ff6c6b" :background "#1B2229")))
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t
              show-paren-delay 0.01
              rainbow-delimiters-max-face-count 6))
;; don't you think it's a little to shine? no. useful in lisp programming.
(use-package rainbow-delimiters
  :config
  ;; (set-face-foreground 'rainbow-delimiters-depth-1-face "DarkOrange") ;lazycat
  ;; (set-face-foreground 'rainbow-delimiters-depth-2-face "DeepSkyBlue")
  ;; (set-face-foreground 'rainbow-delimiters-depth-3-face "DarkRed")
  (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "lime green")

  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
   ;;   (text-mode . rainbow-delimiters-mode)
   ))

(run-with-timer 2 0 #'(lambda ()
                        (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
                        (set-face-foreground 'rainbow-delimiters-depth-4-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-5-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-6-face "lime green")
                        (set-face-foreground 'rainbow-delimiters-depth-7-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-8-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-9-face "lime green")

))
#+end_src
** rainbow cursor
#+begin_src emacs-lisp
;; we don't want the cursor vanish
(blink-cursor-mode -1)
(set-cursor-color "gold")

(defvar rainbow-cursor-timer nil)
(setq rainbow-cursor-color-list (vector"#FF0000";red
		                               "#FF5000"
		                               "#FF9F00";orange
		                               "#FFFF00";yellow
		                               "#BFFF00"
		                               "#00FF00";green
		                               "#00FFFF";
		                               "#0088FF"
		                               "#0000FF";blue
		                               "#5F00FF"
		                               "#8B00FF";purple
		                               "#CF00FF"
		                               "#FF0088"
		                               ))
(setq rainbow-cursor-color-pointer 1)
(defun rainbow-cursor-change-color ()
  "Take a color from `rainbow-color-list' by the pointer.
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (elt rainbow-cursor-color-list
                         rainbow-cursor-color-pointer)))


(defun rainbow-cursor-disable ()
  ""
  (interactive)
  (when rainbow-cursor-timer
    (cancel-timer rainbow-cursor-timer)
    (setq rainbow-cursor-timer nil)))

(defun rainbow-cursor-enable ()
  ""
  (interactive)
  (rainbow-cursor-disable)
  (setq rainbow-cursor-timer
        (run-with-timer 0 0.05 #'rainbow-cursor-change-color)))

(rainbow-cursor-enable)

    #+end_src
** tree-sitter
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
(require 'tree-sitter-hl)
(require 'tree-sitter-debug)
(require 'tree-sitter-query)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)


#+end_src
** window
#+begin_src emacs-lisp
(setq split-height-threshold nil)         ;don't split vertically
(setq split-width-threshold 0)            ;need to set this bc `split-window-sensibly' will disregard height-threshold

;; Customize popwin behavior
(use-package shackle                    ;*customize* not working?
  :ensure t
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'bellow)
  (shackle-rules '((magit-status-mode    :select t :align right)
                   (magit-log-mode       :select t :align right)
                   (magit-rev-mode       :select t :align right)
                   ("*quickrun*"         :select t)
                   (profiler-report-mode :select t)
                   (xwidget-webkit-mode  :select t :same t)
                   (apropos-mode         :select t :align right :size 0.2)
                   (help-mode            :select t :align right :size 0.2)
                   (helpful-mode         :select t :align right :size 0.2)
                   (comint-mode          :select t :align right :size 0.2)
                   (grep-mode            :select t :align right)
                   (rg-mode              :select t :align right)
                   (compilation-mode     :select t :align right :size 0.2)
                   (Man-mode             :select t :align right)
                   (info-mode            :select t :align right :popup t :size 0.5)
                   ("*elfeed-entry*"     :select t :align right :popup t :same nil :size 0.5) ;
                   ("*eww*"              :select t :align right :popup t :size 0.6)
                   ("*Org todo*"         :select t :align right :popup t :size 0.3)
                   ("*Org Agenda*"       :select t :align right :popup t :size 0.3)
                   ("*devdocs*"          :select t :align right :popup t :size 0.6)
                   ;; ("*Flycheck errors*"         :select t   :align bellow :size 10)
                   ;; ("*Backtrace*"               :select t   :align bellow :size 0.1)
                   ("*Shell Command Output*"    :select nil :align bellow :size 0.4)
                   ("*Async Shell Command*"     :select nil :align bellow :size 0.4)
                   ("*Org-Babel Error Output*"  :select nil :align bellow :size 0.3)
                   ("*package update results*"  :select nil :align bellow :size 10)
                   ("*Process List*"            :select t   :align bellow :size 0.3)
                   ("*Occur*"                   :select t   :align bellow)
                   ("\\*eldoc\\( for \\)?.*\\*" :select nil :align bellow :size 15 :regexp t))))

;; All `temp-buffer's, e.g. *Completions*, will never mess up window layout.
(use-package help
  :ensure nil
  :hook (after-init . temp-buffer-resize-mode)
  :custom
  (help-window-select t))

#+end_src

* tools 
#+begin_src emacs-lisp
(use-package posframe)

(add-to-list 'load-path "~/.emacs.d/site-lisp/one-key/")
(require 'one-key)
#+end_src

* macro and commands

* casting magic
** xref
#+begin_src emacs-lisp
(use-package xref
  :init
  (setq xref-search-program 'ripgrep)
  (setq xref-show-xrefs-function #'xref-show-definitions-completing-read)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  :hook ((xref-after-return xref-after-jump) . recenter))
#+end_src


** hippie-expand 
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill))



#+end_src
** documentation

** language difference(web search &web translate)

** translate
#+begin_src emacs-lisp
(use-package youdao-dictionary
  :bind (("M-s" . youdao-dictionary-search-at-point+)))
#+end_src



** TODO forming
learn from lazy-cat's thing-edit and move-text
one key
#+begin_src emacs-lisp
(setq next-error-recenter 25)

(add-to-list 'load-path "~/.emacs.d/site-lisp/move-text/")
(add-to-list 'load-path "~/.emacs.d/site-lisp/move-text/")
(require 'move-text)
(global-set-key (kbd "M-<up>") 'move-text-up)
(global-set-key (kbd "M-<down>") 'move-text-down)

(add-to-list 'load-path "~/.emacs.d/site-lisp/duplicate-line/")
(require 'duplicate-line)

;; ch source code.
(global-set-key (kbd "C-M-p") 'duplicate-line-or-region-above)
(global-set-key (kbd "C-M-n") 'duplicate-line-or-region-below)

#+end_src


* vertico & orderless
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(use-package vertico
  :hook (after-init . vertico-mode)
  :config
  (setq vertico-count 8)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec))

(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))

#+end_src
* eglot
#+begin_src emacs-lisp
;; eglot
(setq read-process-output-max (* 10 1024 1024))

(dolist (hook '(c-mode-hook
                c++-mode-hook
                java-mode-hook
                python-mode-hook))
  (add-hook hook 'eglot-ensure))
              
                
#+end_src
* corfu and such things
#+begin_src emacs-lisp
(setq tab-always-indent 'complete)
(use-package corfu)
(setq-default corfu-auto t
              corfu-auto-delay 0.3
              corfu-auto-prefix 0)
(with-eval-after-load 'eshell
  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil))))
(setq-default corfu-quit-no-match 'separator)
(global-corfu-mode 1)

(use-package corfu-doc)
(add-hook 'corfu-mode-hook #'corfu-doc-mode)
#+end_src
* consult
#+begin_src emacs-lisp
(use-package consult
  :demand t
  :bind (;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ("M-g f" . consult-flymake)               
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq consult-async-refresh-delay 0.01)
  (setq register-preview-delay 0.01
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :custom
;  (consult-fontify-preserve nil)
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.01)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
;  (consult-project-root-function #'projectile-project-root)
  )

(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-set-up-hook #'cursor-intangible-mode)
#+end_src

* magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-diff-refine-hunk t)            ;what's this?
  (magit-diff-paint-whitespace 'uncommitted)
  )

(setq magit-commit-ask-to-stage nil)    ;don't ask stage question

;; `magit-find-file' used to view file in another branch
(global-unset-key (kbd "C-x m"))
(global-set-key (kbd "C-x mf") #'magit-find-file)
(global-set-key (kbd "C-c g") #'magit-file-dispatch)

;; (("\\.gitignore\\'"     . conf-unix-mode)
;;  ("\\.gitconfig\\'"     . conf-unix-mode)
;;  ("\\.gitattributes\\'" . conf-unix-mode)))


#+end_src

* ORG MODE
** org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  (org-directory "~/org/")
  (org-default-notes-file (expand-file-name "notes.org" org-directory))
  ;; prettify
  (org-startup-indented t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  (org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+")))
  ;; image
  (org-image-actual-width nil)
  (org-display-remote-inline-images 'cache)
  ;; more user-friendly
  (org-clone-delete-id t)
  (org-use-sub-superscripts '{})
  (org-yank-adjusted-subtrees t)
  (org-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content t)
  ;; call C-c C-o explicitly
  (org-return-follows-link nil)
  ;; todo
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELLED(c@/!)")))

  (org-todo-keyword-faces '(("TODO"       :foreground "#feb24c" :weight bold)
                            ("DONE"       :foreground "#50a14f" :weight bold)
                            ("CANCELLED"  :foreground "#ff6480" :weight bold)))
  (org-use-fast-todo-selection 'auto)   ;expert
  (org-enforce-todo-dependencies nil)
  (org-enforce-todo-checkbox-dependencies t)
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                           ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                           ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (org-closed-keep-when-no-todo t)      ;wt
  ;; log
  (org-log-repeat 'time)
  (org-log-into-drawer t)
  ;; tags, e.g. #+TAGS: keyword in your file
  (org-use-tag-inheritance nil)
  ;; (org-use-fast-tag-selection t)        ;wt
  ;; (org-fast-tag-selection-single-key t)
  ;; archive
  ;; (org-archive-location "%s_archive::datetree/")
  ;; id
  ;; (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  ;; abbreviation for url
  (org-link-abbrev-alist '(("GitHub" . "https://github.com/") ;wt
                           ("GitLab" . "https://gitlab.com/")
                           ("Google" . "https://google.com/search?q=")
                           ("RFCs"   . "https://tools.ietf.org/html/")
                           ("LWN"    . "https://lwn.net/Articles/")
                           ("WG21"   . "https://wg21.link/"))))

;; (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>") 
;;                                  ("/" italic "<i>" "</i>")
;;                                  ("_" underline "<span 
;; style=\"text-decoration:underline;\">" "</span>")
;;                                  ("=" org-code "<code>" "</code>"
;;                  verbatim)
;;                                  ("~" org-verbatim "<code>" "</code>"
;;                  verbatim)
;;                                  ("+" (:strike-through t) "<del>" "</del>")
;;                                  ("@" org-warning "<b>" "</b>")))
;;       org-export-latex-emphasis-alist (quote 
;;                                        (("*" "\\textbf{%s}" nil)
;;                                         ("/" "\\emph{%s}" nil) 
;;                                         ("_" "\\underline{%s}" nil)
;;                                         ("+" "\\texttt{%s}" nil)
;;                                         ("=" "\\verb=%s=" nil)
;;                                         ("~" "\\verb~%s~" t)
;;                                         ("@" "\\alert{%s}" nil))))

(use-package valign
  :ensure t
  :hook ((markdown-mode org-mode) . valign-mode))

;; (setq org-startup-folded 'show2levels)
#+end_src

** outfit
*** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭")
        org-ellipsis " ▼"))

  #+END_SRC

*** cycle
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab t
  org-cycle-global-at-bob t
  )

(require 'org-tempo)

#+END_SRC

** agenda
#+begin_src emacs-lisp
(setq org-agenda-include-diary nil)
  ;; (org-agenda-files (list (expand-file-name "tasks.org" org-directory)))
  ;; (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  ;; (org-agenda-insert-diary-extract-time t)
  ;; (org-agenda-inhibit-startup t)
  ;; (org-agenda-time-leading-zero t)
  ;; (org-agenda-remove-tags t)
  ;; (org-agenda-columns-add-appointments-to-effort-sum t)
  ;; (org-agenda-restore-windows-after-quit t)
  ;; (org-agenda-window-setup 'current-window)

#+end_src

** refile
#+begin_src emacs-lisp
  ;; refile
(setq org-log-refile nil)
(setq org-refile-targets '((nil . (:level . 1))
                           (nil . (:level . 2))
                           (nil . (:level . 3))))

#+end_src


** export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)

(with-eval-after-load 'org
  (setq org-odt-preferred-output-format "docx") ;ODT转换格式默认为docx
  (setq org-startup-folded nil)                 ;默认展开内容

  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory lazycat-emacs-root-dir)
                                 (file-name-as-directory "template")
                                 "template.docx")))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file))))

;; (use-package ox-reveal
;;   :commands (org-reveal)
;;   :init
;;   (add-hook 'after-init-hook #'org-reveal)
;;   :config
;;   (setq org-reveal-root "~/.reveal.js"
;;    org-reveal-theme "moon"
;;    org-reveal-plugins '(classList markdown zoom notes)
;;    ))

(setq org-export-headline-levels 1
      org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-html-checkbox-type 'html
      org-html-doctype "html5"
      org-html-html5-fancy t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))

;; (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f" "xelatex -interaction nonstopmode %f"))
;; (setq org-export-allow-bind-keywords t)
 #+END_SRC

** org-src
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map "\C-c\C-c" 'org-edit-src-exit)
(setq org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (C          . t)
                               (python     . t)
                               (shell      . t)
                               (latex      . t)
                               (dot        . t)

                               ))
 #+END_SRC

** mouse
#+begin_src emacs-lisp
(setq org-mouse-features '(activate-checkboxes))
#+end_src

* lisp
#+begin_src emacs-lisp
;; elisp
(defconst eval-as-comment-prefix ";;=> ")
;; Imitate scala-mode
;; from https://github.com/dakra/dmacs
(defun eval-to-comment (&optional arg)
  (interactive "P")
  (let ((start (point)))
    (eval-print-last-sexp arg)
    (save-excursion
      (goto-char start)
      (save-match-data
        (re-search-forward "[[:space:]\n]+" nil t)
        (insert eval-as-comment-prefix)))))

(define-key emacs-lisp-mode-map "\C-c\C-b" 'eval-buffer)
(define-key emacs-lisp-mode-map "\C-c\C-c" 'eval-to-comment)
(define-key lisp-interaction-mode-map "\C-c\C-c" 'eval-to-comment)

(defun tu10ng/sharp-quote ()
  "Insert #' unless in a string or comment."
  (interactive)
  (call-interactively #'self-insert-command)
  (let ((ppss (syntax-ppss)))
    (unless (or (elt ppss 3)
                (elt ppss 4)
                (eq (char-after) ?'))
      (insert ?'))))

(define-key emacs-lisp-mode-map "#" #'tu10ng/sharp-quote)

(use-package ielm
  :ensure nil
  :hook (ielm-mode . company-mode))

(use-package slime)
(setq inferior-lisp-program "sbcl")

#+end_src

* emacs-lisp
#+begin_src emacs-lisp
(defun set-up-hippie-expand-for-elisp ()
  "Locally set `hippie-expand' completion functions for use with Emacs Lisp."
  (make-local-variable 'hippie-expand-try-functions-list)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol t)
  (add-to-list 'hippie-expand-try-functions-list 'try-complete-lisp-symbol-partially t))

(defun sanityinc/emacs-lisp-setup ()
  "Enable features useful when working with elisp."
  (set-up-hippie-expand-for-elisp))

(require 'derived)

(defconst sanityinc/elispy-modes
  '(emacs-lisp-mode ielm-mode)
  "Major modes relating to elisp.")


(dolist (hook (mapcar #'derived-mode-hook-name sanityinc/elispy-modes))
  (add-hook hook 'sanityinc/emacs-lisp-setup))


#+end_src

* makefile
#+begin_src emacs-lisp

(add-hook 'makefile-mode-hook #'(lambda () (fset 'makefile-warn-suspicious-lines 'ignore)))

(defun tu10ng/makefile-dollar-paren (ch)
  "command when pressed $. if ch ALPHA, Insert $(CH, otherwise $CH, like $<."
  (interactive "cvar?:")
  (unless (eq (char-after) ?\()
    (unless (or (< ch ?A)                   ;like <
                (and (> ch ?Z)
                     (< ch ?a))
                (> ch ?z))
      (insert ?\())
    (if (= ch ?)
        (call-interactively #'backward-delete-char-untabify)
      (insert ch))))

(with-eval-after-load 'make-mode
  (define-key makefile-mode-map "$" #'(lambda ()
                                        (interactive)
                                        (self-insert-command 1)
                                        (call-interactively #'tu10ng/makefile-dollar-paren))))


#+end_src

* games
#+begin_src emacs-lisp
(use-package figlet)
(use-package speed-type)
;;(use-package typit)
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/typit/")
;; (setq typit-test-time (* 5 60)
;;       typit-display-method 'display-buffer-at-bottom)



(defun tu10ng/speed-type-buffer-n (n)
  "type N chars starting from random point in current buffer. if current buffer has char less than n, use the whole buffer. "
  (interactive "P")
  (if n
      (unless (< (point-max) n)
        (let ((start (random (- (point-max) n))))
          (speed-type--setup
           (buffer-substring-no-properties start
                                           (+ start n)))))
    (speed-type-buffer 1)))

(defvar tu10ng/typegame-tmpfile "/tmp/typegame")

(defun tu10ng/typegame (&optional char path ext)
  "find all file recursively in PATH with extension EXT(string without leading point, like 'c'), concat into a file, open first CHAR chars for `speed-type'.
Call `tu10ng/speed-type-buffer-n' to set a new buffer for typing."
  ;; (interactive "Dpath?:")
  (interactive)
  (let* ((char (if char char 1000))
         (path (if path path "~/Downloads/requests"))
         (ext (if ext ext "py")))
    (shell-command (concat "fish -c 'fd . " path " --extension " ext " | xargs cat > " tu10ng/typegame-tmpfile "'"))
    ;; failure
    (if (f-empty? tu10ng/typegame-tmpfile)
        (format "no files found or maybe are empty.")
      ;; `find-file' is unbearably slow
      (find-file-literally "/tmp/typegame")
      (goto-char 0)
      (replace-string "  " "")
      ;; execute from current point, need reset point to act on whole buffer
      ;; comments should stay
      ;; c has two var for comment `comment-start' `c-line-comment-starter', and the spacing after comment makes it hard to auto remove comment.
      ;; maybe we can set `comment-start' for the tmpfile.
      ;; only for c
      (goto-char 0)    
      (replace-string "// " "")
      (goto-char 0)
      (replace-string "//" "")
      (goto-char 0)
      (replace-string "

" "
")                                   ;is this the only way?
      (save-buffer)
      (tu10ng/speed-type-buffer-n char)
      (kill-buffer "typegame"))))

;;(setq typit-line-length (window-width))
(use-package zone-nyan
  :defer t)
(use-package autotetris-mode
  :defer t)
(use-package flames-of-freedom
  :defer t)

#+end_src

* c mode
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook 'c-toggle-auto-hungry-state)
;;(remove-hook 'c-mode-common-hook 'cc-mode)

;; A compiler output viewer
(use-package rmsbolt
  :commands rmsbolt-compile
  :custom
  (rmsbolt-asm-format nil)
  (rmsbolt-default-directory "/tmp"))


#+end_src





* global key bindings
** reopen
#+BEGIN_SRC emacs-lisp
(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))

(defun tu10ng/other-window (COUNT &optional ALL-FRAMES INTERACTIVE)
  ""
  (interactive "p\ni\np")
  (if (= (length (window-list-1)) 1)
      (consult-buffer-other-window)
    (other-window COUNT ALL-FRAMES INTERACTIVE))
  (tu10ng/set-mode-line-color-input-method))


(global-set-key "\M-i" 'tu10ng/other-window)

#+END_SRC

** jump-to-char
#+begin_src emacs-lisp

;; TODO with temporaly highlight all the char in this or next line
(defun tu10ng/jump-to-char (arg char &optional interactive)
  "Kill up to and including ARGth occurrence of CHAR.
When run interactively, the argument INTERACTIVE is non-nil.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'.
If called interactively, do a case sensitive search if CHAR
is an upper-case character."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		             (read-char-from-minibuffer "Zap to char: "
						                        nil 'read-char-history)
                     t))
  ;; Avoid "obsolete" warnings for translation-table-for-input.
  (with-no-warnings
    (if (char-table-p translation-table-for-input)
	    (setq char (or (aref translation-table-for-input char) char))))
  (let ((case-fold-search (if (and interactive (char-uppercase-p char))
                              nil
                            case-fold-search)))
    (goto-char (- (search-forward (char-to-string char) nil nil arg) 1))))


#+end_src
** exchange-key
#+begin_src emacs-lisp
(defun tl/exchange-keys ()
  "exchange some keys' behaviour, like '1' will ouput '!', '!' output '1'"
  (interactive)
  (global-set-key (kbd "1") (lambda () (interactive) (insert "!")))
  (global-set-key (kbd "4") (lambda () (interactive) (insert "$")))
  (global-set-key (kbd "!") (lambda () (interactive) (insert "1")))
  (global-set-key (kbd "$") (lambda () (interactive) (insert "4")))
  )

#+end_src
** open line
#+begin_src emacs-lisp
(defun open-newline-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun open-newline-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'open-newline-below)
(global-set-key "\M-o" 'open-newline-above)


#+end_src

** bind
#+begin_src emacs-lisp
(global-set-key "\M-p" #'backward-paragraph)
(global-set-key "\M-n" #'forward-paragraph)
(global-set-key "\C-r" #'query-replace)

(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" #'org-store-link)
(global-set-key "\C-ca" #'org-agenda-list)
(global-set-key "\C-cc" #'org-capture)

(global-set-key "\C-ct" #'tldr)
(global-set-key "\C-cm" #'man)
(global-set-key "\C-x\C-d" #'dired)

(global-set-key "\M-z" #'tu10ng/jump-to-char)

(one-key-create-menu
 "CS"
 '(
   (("d" . "find") . consult-find)
   (("D" . "locate") . consult-locate)
   (("g" . "") . consult-grep)
   (("G" . "") . consult-git-grep)
   (("r" . "") . consult-ripgrep)
   (("l" . "") . consult-line)
   (("L" . "") . consult-line-multi)
   (("m" . "") . consult-multi-occur)
   (("k" . "") . consult-keep-lines)
   (("u" . "") . consult-focus-lines)
   (("w" . "") . eww-search-words)   ;eww
   (("e" . "") . browse-url-at-point)   ;eww
   
   )
 t)

(global-unset-key (kbd "C-s"))
(global-set-key (kbd "C-s") 'one-key-menu-cs)

;; (add-hook 'after-init-hook 'tl/exchange-keys)
#+end_src

