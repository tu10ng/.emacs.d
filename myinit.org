
* FEEL the magic elements
** BENCHMARK
#+begin_src emacs-lisp
;; in GNU Emacs 29.0.50, a function used by benchmark turn it's required arguments from 2 to 3, thus need manually change the package source.
(use-package benchmark-init)
(benchmark-init/activate)
#+end_src

** native compilation
#+begin_src emacs-lisp
(setq comp-deferred-compilation t
      package-native-compile t
)

#+end_src
** find magic
*** general
#+BEGIN_SRC emacs-lisp
(use-package info-colors 
  :hook ('Info-selection-hook . 'info-colors-fontify-node))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	which-key-idle-secondary-delay 0
	which-key-sort-order 'which-key-prefix-then-key-order
	))

#+END_SRC

*** swiper counsel
;; (use-package swiper
;;   :ensure try
;;   :bind (("C-s"  . swiper))
;;   )
;; (use-package counsel
;;   :bind
;;   ("M-x"  . counsel-M-x)
;;   ("C-x C-f"  . counsel-find-file)
;;   :config
;;   (progn
;;     (ivy-mode 1)
;;     (setq ivy-use-virtual-buffers t)
;;     (setq ivy-display-style 'fancy))      
;;   )
;; (use-package ivy-rich
;;   :init (ivy-rich-mode 1))

*** consult vertico orderless
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(use-package vertico
  :config
  (setq vertico-count 8)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec)
  (vertico-mode))

(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))

(global-unset-key (kbd "C-s"))
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ;;         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-'" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; C-s bindings (search-map)
         ("C-s d" . consult-find)
         ("C-s D" . consult-locate)
         ("C-s g" . consult-grep)
         ("C-s G" . consult-git-grep)
         ("C-s r" . consult-ripgrep)
         ("C-s l" . consult-line)
         ("C-s L" . consult-line-multi)
         ("C-s m" . consult-multi-occur)
         ("C-s k" . consult-keep-lines)
         ("C-s u" . consult-focus-lines))

  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  )

(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-set-up-hook #'cursor-intangible-mode)
#+end_src

#+RESULTS:
| cursor-intangible-mode |

** outfit of magic
#+begin_src emacs-lisp
(toggle-frame-maximized)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(set-frame-parameter nil 'undecorated t)  

;; (use-package tangotango-theme)
;; (enable-theme 'tangotango)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/lazycat-theme"))
(require 'lazycat-theme)
(lazycat-theme-load-dark)
(setq lazycat-dark-brighter-modeline t
      lazycat-dark-brighter-comments t
      lazycat-dark-comment-bg t
      lazycat-dark-padded-modeline t)

;;can modeline change its color overtime if it doesnot have any other functionalies?
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/awesome-tray"))
(require 'awesome-tray)
(setq awesome-tray-active-modules
      '("location" "mode-name" "buffer-name" "parent-dir"
        "circe" "buffer-read-only"
	    "date" 
	    ))
(awesome-tray-mode 1)

#+END_SRC

** misc
#+begin_src emacs-lisp
(setq garbage-collection-messages t
      large-file-warning-threshold nil
      confirm-kill-processes nil
      shift-select-mode nil
      shell-command-prompt-show-cwd 1)

(setq initial-scratch-message nil
      initial-buffer-choice nil)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)
(defun startup-echo-area-message ()
  (if (daemonp)
      ""
    (substitute-command-keys
     "")))

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq create-lockfiles nil
      load-prefer-newer t)

(setq inhibit-compacting-font-caches t)

(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=20")
(set-fontset-font t 'han "黑体:pixelsize=20")

(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

(setq use-short-answers t)

(fset 'list-buffers 'ibuffer)

(setq y-or-n-p-use-read-key t
      read-char-choice-use-read-key t)


(setq initial-major-mode 'org-mode)
(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq process-adaptive-read-buffering nil
      read-process-output-max (* 10 1024 1024))
(setq-default
 fill-column 79
 indent-tabs-mode nil
 tab-width 4
 truncate-partial-width-windows nil
 sentence-end-double-space nil)

(setq ring-bell-function 'ignore)

(global-subword-mode 1)


#+END_SRC  

** dired
#+begin_src emacs-lisp
(use-package all-the-icons)

;; too ugly
;; (use-package dirvish)

#+end_src

** mark
*** delsel
#+begin_src emacs-lisp
;; Delete selection when we type or paste.
(use-package delsel
  :config
  (delete-selection-mode))
#+end_src
*** visible mark
#+begin_src emacs-lisp
;; should use macro
(defface visible-mark-face1
  '((((type tty) (class mono)))
    (t (:background "gray")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face2
  '((((type tty) (class mono)))
    (t (:background "gray60"))) ;;"DodgerBlue1"
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face3
  '((((type tty) (class mono)))
    (t (:background "lime green")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face4
  '((((type tty) (class mono)))
    (t (:background "deep pink")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face5
  '((((type tty) (class mono)))
    (t (:background "DarkOrange2")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face6
  '((((type tty) (class mono)))
    (t (:background "turquoise")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)

(use-package visible-mark)
(global-visible-mark-mode 1) ;; or add (visible-mark-mode) to specific hooks
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1
			               visible-mark-face2
			               visible-mark-face3
			               visible-mark-face4
			               visible-mark-face5
			               visible-mark-face6      
			               ))
#+end_src

** line 
#+BEGIN_SRC emacs-lisp
(line-number-mode nil)
;; (use-package linum-relative
;;   :custom
;;   (linum-relative-current-symbol "") 
;;   (linum-relative-global-mode t))
(setq  line-move-ignore-invisible t
       next-line-add-newlines t)
(set-default 'truncate-lines t)

(defun open-newline-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun open-newline-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'open-newline-below)
(global-set-key "\M-o" 'open-newline-above)
#+END_SRC

** rainbow parentheses
((t
  (:weight ultra-bold :foreground "#ff6c6b" :background "#1B2229")))
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t))
;; don't you think it's a little to shine?
(use-package rainbow-delimiters 
  :config
  ;; 设置每一级括号的颜色
  (set-face-foreground 'rainbow-delimiters-depth-1-face "gold") 
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1") 
  (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green") 
  (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-2-face "t")
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (conf-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
   (text-mode . rainbow-delimiters-mode)
   ;;   (org-mode . rainbow-delimiters-mode)
   (help-mode . rainbow-delimiters-mode)
   ))
;; (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink") 
;; (set-face-foreground 'rainbow-delimiters-depth-5-face "DarkOrange2")
;; (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise") 
;; (set-face-foreground 'rainbow-delimiters-depth-7-face "medium orchid") 
;; (set-face-foreground 'rainbow-delimiters-depth-8-face "chartreuse3") 
;; (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan") 


#+end_src

#+RESULTS:
| rainbow-delimiters-mode |


** rainbow cursor
#+begin_src emacs-lisp
;; we don't want the cursor vanish
(blink-cursor-mode -1)
(setq rainbow-cursor-color-list '("#FF0000";red
		                          "#FF5000"
		                          "#FF9F00";orange
		                          "#FFFF00";yellow
		                          "#BFFF00"
		                          "#00FF00";green
		                          "#00FFFF";
		                          "#0088FF"
		                          "#0000FF";blue
		                          "#5F00FF"
		                          "#8B00FF";purple
		                          "#CF00FF"
		                          "#FF0088"
		                          ))
(setq rainbow-cursor-color-pointer 1)
(defun cursor-color-change ()
  "Take a color from `rainbow-color-list' by the pointer.  
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (nth rainbow-cursor-color-pointer
		                 rainbow-cursor-color-list)))

(run-with-timer ()
		        (/ .5 (length rainbow-cursor-color-list))
		        'cursor-color-change)
    #+end_src    

** scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-step 2
      scroll-margin 2
      hscroll-step 2
      hscroll-margin 2
      scroll-conservatively 101)
;;      scroll-preserve-screen-position 'always
      
#+END_SRC

** keybinding (navigation, etc.)
#+begin_src emacs-lisp
;;learn from lazy-cat's thing-edit and move-text
(global-set-key "\M-i" 'other-window)
(global-set-key "\C-r" 'query-replace)

(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; 这样的键盘布局对于人类来说为时尚早……
;; (defun tl/exchange-keys ()
;;   "exchange some keys' behaviour, like '1' will ouput '!', '!' output '1'"
;;   (interactive)
;;   (global-set-key (kbd "1") (lambda () (interactive) (insert "!")))
;;   (global-set-key (kbd "4") (lambda () (interactive) (insert "$")))
;;   (global-set-key (kbd "!") (lambda () (interactive) (insert "1")))
;;   (global-set-key (kbd "$") (lambda () (interactive) (insert "4")))
;;   )
;;     (add-hook 'after-init-hook 'tl/exchange-keys)
#+end_src

** keyboard input method
*** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
(if (posframe-workable-p)
    (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup))
(setq pyim-page-length 9)
(setq pyim-indicator-list (list #'pyim-indicator-with-posframe))

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-greatdict")  
;; (require 'pyim-greatdict)
;; (pyim-greatdict-enable)
#+end_src

#+RESULTS:
: pyim

** server
#+begin_src emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+end_src

** backup
 #+BEGIN_SRC emacs-lisp
 (setq make-backup-files nil)
 #+END_SRC
** auto-save when idle
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq auto-save-idle 1)
(defun auto-save-buffers ()
  (interactive)
  (let ((auto-save-buffer-list))
    (save-excursion
      (dolist (buf (buffer-list))
	(set-buffer buf)
	(if (and (buffer-file-name) (buffer-modified-p))
	    (progn
	      (push (buffer-name) auto-save-buffer-list)
	      (with-temp-message "" (basic-save-buffer))
	      ))))))

(defun auto-save-enable ()
  (interactive)
  (run-with-idle-timer auto-save-idle t #'auto-save-buffers))

(auto-save-enable)
#+END_SRC

* prepare the truck to magic world
** Try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

** posframe
#+BEGIN_SRC emacs-lisp
  (use-package posframe)
 #+END_SRC
** Restart Emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :defer t
  )

(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))
#+END_SRC

** youdao-dictionary
#+begin_src emacs-lisp
(use-package youdao-dictionary
  :bind (("M-s" . youdao-dictionary-search-at-point+)))
#+end_src

* preparing our magic array
** ORG mode
*** outfit
**** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭")
        org-ellipsis " ▼"))

  #+END_SRC

**** table font
(let ((emacs-font-size 14)
  (emacs-font-name "WenQuanYi Micro Hei Mono"))
  (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)))
  (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))

(with-eval-after-load 'org
  (defun org-buffer-face-mode-variable ()
    (interactive)
    (make-face 'width-font-face)
    (set-face-attribute 'width-font-face nil :font "等距更纱黑体 SC 15")
    (setq buffer-face-mode-face 'width-font-face)
    (buffer-face-mode))

(add-hook 'org-mode-hook 'org-buffer-face-mode-variable))
**** cycle
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab t
  org-cycle-global-at-bob t
  )

(require 'org-tempo)

#+END_SRC

*** agenda
#+begin_src emacs-lisp
(setq-default org-agenda-include-diary nil)
#+end_src
*** export
#+BEGIN_SRC emacs-lisp
;; (use-package ox-reveal
;;   :commands (org-reveal)
;;   :init
;;   (add-hook 'after-init-hook #'org-reveal)
;;   :config
;;   (setq org-reveal-root "~/.reveal.js"
;;    org-reveal-theme "moon"
;;    org-reveal-plugins '(classList markdown zoom notes)
;;    ))

(setq org-export-headline-levels 1
      org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-html-checkbox-type 'html
      org-html-doctype "html5"
      org-html-html5-fancy t)

;; colors for blocks
(use-package htmlize
  :defer t
  )
 #+END_SRC

 #+RESULTS:
*** babel
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (C . t)
   (java . t)
   (js . t)
   (ruby . t)
   (ditaa . t)
   (python . t)
   (shell . t)
   (latex . t)
   (plantuml . t)
   (R . t)))
 #+END_SRC

*** mouse
#+begin_src emacs-lisp
(setq org-mouse-features '(activate-checkboxes))
#+end_src
** project and file's magic
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config (projectile-mode 1)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects")
    (setq projectile-project-search-path '("~/Projects/")))
  (setq projectile-switch-project-action #'projectile-dired)
  )

(use-package ripgrep)

#+END_SRC

** cc mode
#+begin_src emacs-lisp
(use-package cc-mode)
(add-hook 'c-mode-common-hook 'c-toggle-auto-hungry-state)
;;(define-key c-mode-base-map "\C-m" 'c-context-line-break)

   #+end_src

   #+RESULTS:
** python

** other modes
#+begin_src emacs-lisp
(use-package fish-mode)
(use-package lox-mode)
(use-package php-mode)
(use-package crontab-mode)
(use-package graphviz-dot-mode)
;;  (use-package pdf-tools)

;;  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
;;  (require 'css-sort-buffer)

#+end_src

** games
#+begin_src emacs-lisp
(use-package figlet
  :defer t)
(use-package speed-type
  :defer t)
(use-package zone-nyan
  :defer t)
(use-package autotetris-mode
  :defer t)
(use-package flames-of-freedom
  :defer t)
#+end_src

#+RESULTS:

* casting magic
** our loyal assistent carrying all our books
#+begin_src emacs-lisp
(use-package dumb-jump
  )

(use-package xref
  )

(use-package marginalia
  :config
  (marginalia-mode))

;; persist history over emacs restarts.
(use-package savehist
  :init (savehist-mode))


;; (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
;; (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
#+end_src

** choosing your lyrics
*** Company
  (use-package company
    :after lsp-mode
    :bind
    (:map company-active-map
	  ("<tab>" . company-complete-selection)
	  ("C-j" .  company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0)
    )
  (add-hook 'after-init-hook 'global-company-mode)
  ;; (setq company-show-numbers t)
  
  (use-package company-tabnine
    )
  ;;(add-to-list 'company-backends #'company-tabnine)
  
  (defun company//sort-by-tabnine (candidates)
    (if (or (functionp company-backend)
	    (not (and (listp company-backend) (memq 'company-tabnine company-backend))))
	candidates
      (let ((candidates-table (make-hash-table :test #'equal))
	    candidates-1
	    candidates-2)
	(dolist (candidate candidates)
	  (if (eq (get-text-property 0 'company-backend candidate)
		  'company-tabnine)
	      (unless (gethash candidate candidates-table)
		(push candidate candidates-2))
	    (push candidate candidates-1)
	    (puthash candidate t candidates-table)))
	(setq candidates-1 (nreverse candidates-1))
	(setq candidates-2 (nreverse candidates-2))
	(nconc (seq-take candidates-1 1)	; number of items tabnine shows
	       (seq-take candidates-2 1)
	       (seq-drop candidates-1 1)
	       (seq-drop candidates-2 1)))))
  
  (add-to-list 'company-transformers 'company//sort-by-tabnine t)
  ;; `:separate`  使得不同 backend 分开排序
  (add-to-list 'company-backends '(company-capf :with company-tabnine :separate))
  
  ;; The free version of TabNine is good enough,
  ;; and below code is recommended that TabNine not always
  ;; prompt me to purchase a paid version in a large project.
  (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
    (let ((company-message-func (ad-get-arg 0)))
      (when (and company-message-func
		 (stringp (funcall company-message-func)))
	(unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
	  ad-do-it))))
*** corfu
#+begin_src emacs-lisp
(use-package corfu
  ;; TAB-and-Go customizations
  :custom
  (corfu-auto t)
  (corfu-quit-at-boundary t)
  (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect-first nil) ;; Disable candidate preselection
  (corfu-auto-prefix 1)
  (corfu-auto-delay 0.01)
  ;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (corfu-global-mode))

;; Use dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))

(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    ;; (setq-local corfu-auto nil) Enable/disable auto completion
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)


#+end_src

#+RESULTS:
| corfu-enable-in-minibuffer | savehist-minibuffer-hook | marginalia--minibuffer-setup | rfn-eshadow-setup-minibuffer | minibuffer-error-initialize | minibuffer-history-isearch-setup | minibuffer-history-initialize |
*** backends
#+begin_src emacs-lisp
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-sgml)
  (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'cape-line)
)

#+end_src

#+RESULTS:

** composing our chanting
*** citre
#+begin_src emacs-lisp
(use-package citre
  :init (require 'citre-config)
  (global-set-key (kbd "M-.") 'citre-ace-peek)
  (global-set-key (kbd "M-,") 'citre-peek-restore)
;;  (global-set-key (kbd "M-.") 'citre-update-this-tags-file)
  :config
  (setq
   citre-project-root-function #'projectile-project-root
   citre-default-create-tags-file-location 'global-cache
   citre-use-project-root-when-creating-tags t
   citre-prompt-language-for-ctags-command t
   )
  )
   
(defun citre-jump+ ()
  (interactive)
  (condition-case _
      (citre-jump)
    (error (let* ((xref-prompt-for-identifier nil))
             (call-interactively #'xref-find-definitions)))))

#+end_src

#+RESULTS:
: citre-jump+

** step by step we strengthen our spell
*** magit
#+begin_src emacs-lisp
(use-package magit
  :defer t
  )
(use-package diff-hl)
(global-set-key (kbd "C-c g") 'magit-file-dispatch)
#+end_src

** see the power of spell
*** quickrun
#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  )

#+end_src

*** flycheck
#+BEGIN_SRC emacs-lisp
;; flycheck好烦阿，能不能只显示未使用的变量和未定义的函数？
(use-package flycheck
  :init (global-flycheck-mode))
(setq flycheck-idle-change-delay 3)
(setq flycheck-javascript-eslint-executable "~/node_modules/.bin/eslint")
  #+END_SRC

  #+RESULTS:
  : ~/node_modules/.bin/eslint




