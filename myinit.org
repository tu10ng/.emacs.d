#+STARTUP: content nohideblocks
#+PROPERTY: header-args :results output none
* PREPARE the truck to magic world
** BENCHMARK
#+begin_src emacs-lisp
;; in GNU Emacs 29.0.50, a function used by benchmark turn it's required arguments from 2 to 3, thus need manually change the package source.
(use-package benchmark-init)
(benchmark-init/activate)
#+end_src
** native compilation
#+begin_src emacs-lisp
(setq comp-deferred-compilation t
      package-native-compile t
)

#+end_src

** Try
#+BEGIN_SRC emacs-lisp
(use-package try)
(use-package posframe)
(use-package all-the-icons)
#+END_SRC

** file on change
#+begin_src emacs-lisp
 (setq make-backup-files nil)

;; Update buffer whenever file changes
;; Also revert dired buffer.
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))

(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save/") ; add auto-save to your load-path
(require 'auto-save)
(auto-save-enable)
(add-hook 'makefile-mode-hook #'(lambda () (fset 'makefile-warn-suspicious-lines 'ignore)))

(setq auto-save-silent t)   ; quietly save
(setq auto-save-delete-trailing-whitespace nil)  ; automatically delete spaces at the end of the line when saving

;;; custom predicates if you don't want auto save.
;;; disable auto save mode when current filetype is an gpg file.
;; (setq auto-save-disable-predicates
;;       '((lambda ()
;;       (string-suffix-p
;;       "gpg"
;;       (file-name-extension (buffer-name)) t))))
#+end_src

** connection between session
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)

(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))

;; Back to the previous position
(use-package saveplace
  :hook (after-init . save-place-mode))

(use-package recentf
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '( ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))

#+END_SRC

** misc
#+begin_src emacs-lisp
(setq garbage-collection-messages nil
      large-file-warning-threshold nil
      confirm-kill-processes nil
      shift-select-mode nil
      shell-command-prompt-show-cwd 1)

(setq read-process-output-max (* 3 1024 1024))
(setq initial-scratch-message nil
      initial-buffer-choice nil)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)
(defun startup-echo-area-message ()
  (if (daemonp)
      ""
    (substitute-command-keys
     "")))

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq create-lockfiles nil
      load-prefer-newer t)

(setq inhibit-compacting-font-caches t)

(setq word-wrap-by-category t)

(setq initial-scratch-message "")
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; persist history over emacs restarts.
(use-package savehist
  :init (savehist-mode))

;; key repeat delay through /usr/bin/xset
;; auto repeat delay, repeat rate
;; set to xset r rate 180 30
;; from 500 20

;;(setq initial-buffer-choice "~/org/gtd.org")

(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=20")
;;(set-fontset-font t 'han ":pixelsize=20")
;; lazycat's config
;; (defun load-font-setup()
;;   (cond ((eq window-system 'pgtk)
;;          (set-face-attribute 'default nil :height 140 :family "WenQuanYi Micro Hei Mono"))
;;         (t
;;          (let ((emacs-font-size 14)
;;                (chinese-font-name  "TsangerJinKai03-6763")
;;                english-font-name)
;;            (cond
;;             ((featurep 'cocoa)
;;              (setq english-font-name "Monaco"))
;;             ((string-equal system-type "gnu/linux")
;;              (setq english-font-name "WenQuanYi Micro Hei Mono")))
;;            (when (display-grayscale-p)
;;              (set-frame-font (format "%s-%s" (eval english-font-name) (eval emacs-font-size)))
;;              (set-fontset-font (frame-parameter nil 'font) 'unicode (eval english-font-name))

;;              (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;                (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family (eval chinese-font-name))))
;;              )))))

;; (load-font-setup)


(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

(setq use-short-answers t)

(fset 'list-buffers 'ibuffer)

(setq y-or-n-p-use-read-key t
      read-char-choice-use-read-key t)


;;(setq initial-major-mode 'org-mode)
(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq process-adaptive-read-buffering nil
      read-process-output-max (* 10 1024 1024))
(setq use-dialog-box nil)
(setq-default
 fill-column 79
 indent-tabs-mode nil
 tab-width 4
 truncate-partial-width-windows nil
 sentence-end-double-space nil)

(setq ring-bell-function 'ignore)

(global-subword-mode 1)

(use-package all-the-icons)

#+END_SRC

** gc
#+begin_src emacs-lisp
(use-package gcmh)
(setq gcmh-high-cons-threshold (* 1024 1024 1024))
(gcmh-mode 1)


#+end_src

** language difference(macros! to solve)
#+begin_src emacs-lisp
(defmacro shut-up! (func)
  "Silence FUNC."
  `(advice-add ,func :around
               (defun ,(intern (format "shut-up-%s" func)) (f &rest args)
                 (let ((inhibit-message t))
                   (ignore-errors (apply f args))))))

(defmacro lazy! (&rest body)
  "Delay the evaluation of BODY."
  `(lambda ()
     ,@body))
#+end_src

** one-key
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/one-key/")
(require 'one-key)
#+end_src

** emacs c source directory
#+begin_src emacs-lisp
(setq source-directory "/home/qb/Projects/emacs-git/")
(setq find-function-C-source-directory "/home/qb/Projects/emacs-git/src/")


#+end_src

** showing off to others
#+begin_src emacs-lisp
(use-package wakatime-mode)

(global-wakatime-mode 1) 
#+end_src

* FEEL the magic elements
** find magic
*** packages
#+BEGIN_SRC emacs-lisp
(use-package info-colors
  :hook ('Info-selection-hook . 'info-colors-fontify-node))
(use-package info-rename-buffer)
(info-rename-buffer-mode 1)

(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	which-key-idle-secondary-delay 0
	which-key-sort-order 'which-key-prefix-then-key-order
	))

#+END_SRC

*** TODO consult
when press p or f in `consult-buffer', change into `consult-file'
vertico orderless

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(use-package vertico
  :hook (after-init . vertico-mode)
  :config
  (setq vertico-count 8)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec))

(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))


(use-package consult
  :demand t
  :bind (;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ;;         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-'" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         )
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq consult-async-refresh-delay 0.01)
  (setq register-preview-delay 0.01
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :custom
;  (consult-fontify-preserve nil)
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.01)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
;  (consult-project-root-function #'projectile-project-root)
  )

(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-set-up-hook #'cursor-intangible-mode)
#+end_src

*** TODO key bindings: advise `browse-url-at-point' disable error message
#+begin_src emacs-lisp
;; not useful, and buther when reading info because of shading.
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/vi-navigate/")
;; (require 'vi-navigate)
;; (dolist (hook '(helpful-mode-hook
;;                 read-only-mode-hook))   ;useless when a RO file open from helpful, maybe because RO is set when openning file?
;;   (add-to-list 'vi-navigate-hook-list hook))
;; (vi-navigate-load-keys)


(global-set-key "\M-p" #'backward-paragraph)
(global-set-key "\M-n" #'forward-paragraph)

(global-set-key "\C-r" #'query-replace)

(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" #'org-store-link)
(global-set-key "\C-ca" #'org-agenda-list)
(global-set-key "\C-cc" #'org-capture)

(global-set-key "\C-ct" #'tldr)
(global-set-key "\C-cm" #'man)
(global-set-key "\C-x\C-d" #'dired)

;; TODO with temporaly highlight all the char in this or next line
(defun tu10ng/jump-to-char (arg char &optional interactive)
  "Kill up to and including ARGth occurrence of CHAR.
When run interactively, the argument INTERACTIVE is non-nil.
Case is ignored if `case-fold-search' is non-nil in the current buffer.
Goes backward if ARG is negative; error if CHAR not found.
See also `zap-up-to-char'.
If called interactively, do a case sensitive search if CHAR
is an upper-case character."
  (interactive (list (prefix-numeric-value current-prefix-arg)
		             (read-char-from-minibuffer "Zap to char: "
						                        nil 'read-char-history)
                     t))
  ;; Avoid "obsolete" warnings for translation-table-for-input.
  (with-no-warnings
    (if (char-table-p translation-table-for-input)
	    (setq char (or (aref translation-table-for-input char) char))))
  (let ((case-fold-search (if (and interactive (char-uppercase-p char))
                              nil
                            case-fold-search)))
    (goto-char (- (search-forward (char-to-string char) nil nil arg) 1))))

(global-set-key "\M-z" #'tu10ng/jump-to-char)

(setq eww-search-prefix "https://www.google.com/search?q=")
(setq url-proxy-services 
      '(("http" . "127.0.0.1:8889")
        ("https" . "127.0.0.1:8889"))
      )
(one-key-create-menu
 "CS"
 '(
   (("d" . "find") . consult-find)
   (("D" . "locate") . consult-locate)
   (("g" . "") . consult-grep)
   (("G" . "") . consult-git-grep)
   (("r" . "") . consult-ripgrep)
   (("l" . "") . consult-line)
   (("L" . "") . consult-line-multi)
   (("m" . "") . consult-multi-occur)
   (("k" . "") . consult-keep-lines)
   (("u" . "") . consult-focus-lines)
   (("w" . "") . eww-search-words)   ;eww
   (("e" . "") . browse-url-at-point)   ;eww
   
   )
 t)

(global-unset-key (kbd "C-s"))
(global-set-key (kbd "C-s") 'one-key-menu-cs)

;; http://qb.tulong.xyz
;; (defun tl/exchange-keys ()
;;   "exchange some keys' behaviour, like '1' will ouput '!', '!' output '1'"
;;   (interactive)
;;   (global-set-key (kbd "1") (lambda () (interactive) (insert "!")))
;;   (global-set-key (kbd "4") (lambda () (interactive) (insert "$")))
;;   (global-set-key (kbd "!") (lambda () (interactive) (insert "1")))
;;   (global-set-key (kbd "$") (lambda () (interactive) (insert "4")))
;;   )
;; (add-hook 'after-init-hook 'tl/exchange-keys)
#+end_src

** outfit of magic
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
;;(toggle-frame-maximized)
;;(set-frame-parameter nil 'undecorated t)

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; (use-package tangotango-theme)
;; (enable-theme 'tangotango)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/lazycat-theme"))
(require 'lazycat-theme)
(lazycat-theme-load-dark)
(setq lazycat-dark-brighter-modeline t
      lazycat-dark-brighter-comments t
      lazycat-dark-comment-bg t
      lazycat-dark-padded-modeline t)

(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/awesome-tray"))
(require 'awesome-tray)

;; tree - show current dir with respect to git
;; in the top dir, show full path.
(defun tu10ng/awesome-tray-tree-info ()
  (let ((rst (substring (buffer-file-name)
                        (length (expand-file-name (magit-toplevel)))
                        (- (length (buffer-file-name)) (length (file-name-nondirectory (buffer-file-name)))))))
    (if (string-empty-p rst)
        (magit-toplevel)
      rst)))

(add-to-list 'awesome-tray-module-alist
             '("tree" . (tu10ng/awesome-tray-tree-info awesome-tray-module-file-path-face)))

(setq awesome-tray-active-modules       ;flycheck total,
      '("location" "belong" "mode-name" "buffer-name" "tree"
        "circe" "buffer-read-only"
	    "date"
	    )
      awesome-tray-update-interval 1
      awesome-tray-buffer-name-max-length 40
      awesome-tray-file-path-show-filename nil
      awesome-tray-file-path-truncated-name-length 40
      awesome-tray-file-path-full-dirname-levels 4)
(set-default 'awesome-tray-mode-line-active-color "DarkBlue")

(global-set-key (kbd "C-\\") 'tu10ng/toggle-input-method)
(defun tu10ng/set-mode-line-color-input-method ()
  (if (eq current-input-method nil)     ;if current english
      (set-face-attribute 'mode-line nil
                    :foreground "DarkBlue"
                    :background "DarkBlue")
    (set-face-attribute 'mode-line nil
                    :foreground "DarkRed"
                    :background "DarkRed")))
(defun tu10ng/toggle-input-method ()
  (interactive)
  (toggle-input-method)
  (tu10ng/set-mode-line-color-input-method))

(awesome-tray-mode 1)

(defun tu10ng/other-window (COUNT &optional ALL-FRAMES INTERACTIVE)
  ""
  (interactive "p\ni\np")
  (if (= (length (window-list-1)) 1)
      (consult-buffer-other-window)
    (other-window COUNT ALL-FRAMES INTERACTIVE))
  (tu10ng/set-mode-line-color-input-method))


(global-set-key "\M-i" 'tu10ng/other-window)

;; (defun tu10ng/switch-buffer (&optional sources)
;;   (interactive)
;;   (consult-buffer sources)
;;   (tu10ng/set-mode-line-color-input-method))
;; (global-set-key "\C-xb" 'tu10ng/switch-buffer)

#+END_SRC



** window
*** shackle
#+begin_src emacs-lisp
(setq split-height-threshold nil)         ;don't split vertically
(setq split-width-threshold 0)            ;need to set this bc `split-window-sensibly' will disregard height-threshold

;; Customize popwin behavior
(use-package shackle                    ;*customize* not working?
  :ensure t
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'bellow)
  (shackle-rules '((magit-status-mode    :select t :align right)
                   (magit-log-mode       :select t :align right)
                   (magit-rev-mode       :select t :align right)
                   ("*quickrun*"         :select t)
                   (profiler-report-mode :select t)
                   (xwidget-webkit-mode  :select t :same t)
                   (apropos-mode         :select t :align right :size 0.2)
                   (help-mode            :select t :align right :size 0.2)
                   (helpful-mode         :select t :align right :size 0.2)
                   (comint-mode          :select t :align right :size 0.2)
                   (grep-mode            :select t :align right)
                   (rg-mode              :select t :align right)
                   (compilation-mode     :select t :align right :size 0.2)
                   (Man-mode             :select t :align right)
                   (info-mode            :select t :align right :popup t :size 0.5)
                   ("*elfeed-entry*"     :select t :align right :popup t :same nil :size 0.5) ;
                   ("*eww*"              :select t :align right :popup t :size 0.6)
                   ("*Org todo*"         :select t :align right :popup t :size 0.3)
                   ("*Org Agenda*"       :select t :align right :popup t :size 0.3)
                   ("*devdocs*"          :select t :align right :popup t :size 0.6)
                   ;; ("*Flycheck errors*"         :select t   :align bellow :size 10)
                   ;; ("*Backtrace*"               :select t   :align bellow :size 0.1)
                   ("*Shell Command Output*"    :select nil :align bellow :size 0.4)
                   ("*Async Shell Command*"     :select nil :align bellow :size 0.4)
                   ("*Org-Babel Error Output*"  :select nil :align bellow :size 0.3)
                   ("*package update results*"  :select nil :align bellow :size 10)
                   ("*Process List*"            :select t   :align bellow :size 0.3)
                   ("*Occur*"                   :select t   :align bellow)
                   ("\\*eldoc\\( for \\)?.*\\*" :select nil :align bellow :size 15 :regexp t))))

;; All `temp-buffer's, e.g. *Completions*, will never mess up window layout.
(use-package help
  :ensure nil
  :hook (after-init . temp-buffer-resize-mode)
  :custom
  (help-window-select t))

#+end_src

*** restore windows in bookmark
#+begin_src emacs-lisp
(use-package bookmark-view)
(global-set-key "\C-xrw" #'bookmark-view)
#+end_src

** mark
*** delsel
#+begin_src emacs-lisp
;; Delete selection when we type or paste.
(use-package delsel
  :config
  (delete-selection-mode))
#+end_src
*** visible mark
#+begin_src emacs-lisp
(defface visible-mark-face1
  '((((type tty) (class mono)))
    (t (:background "gray")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face2
  '((((type tty) (class mono)))
    (t (:background "gray60")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)

(use-package visible-mark)
(global-visible-mark-mode 1)
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1
			               visible-mark-face2
			               ))
#+end_src

** line
#+BEGIN_SRC emacs-lisp
(line-number-mode nil)
;; (use-package linum-relative
;;   :custom
;;   (linum-relative-current-symbol "")
;;   (linum-relative-global-mode t))
(setq  line-move-ignore-invisible t
       next-line-add-newlines t)
(set-default 'truncate-lines t)

(defun open-newline-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun open-newline-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'open-newline-below)
(global-set-key "\M-o" 'open-newline-above)
#+END_SRC

** things(thing edit)
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/thing-edit")
(require 'thing-edit)
(setq thing-edit-show-message-p nil)
(setq thing-edit-flash-line-delay 0.1)

(one-key-create-menu
 "THING-EDIT"
 '(
   ;; Copy.
   (("w" . "Copy Word") . thing-copy-word)
   (("s" . "Copy Symbol") . thing-copy-symbol)
   (("o" . "Copy Filename") . thing-copy-filename)
   (("u" . "Copy URL") . thing-copy-url)
   (("x" . "Copy Sexp") . thing-copy-sexp)
   (("g" . "Copy Page") . thing-copy-page)
   (("h" . "Copy Buffer") . thing-copy-whole-buffer)
   (("t" . "Copy Sentence") . thing-copy-sentence)
   (("i" . "Copy List") . thing-copy-list)
   (("c" . "Copy Comment") . thing-copy-comment)
   (("f" . "Copy Function") . thing-copy-defun)
   (("p" . "Copy Parentheses") . thing-copy-parentheses)
   (("l" . "Copy Line") . thing-copy-line)
   (("a" . "Copy To Line Begin") . thing-copy-to-line-beginning)
   (("e" . "Copy To Line End") . thing-copy-to-line-end)
   ;; Cut.
   (("W" . "Cut Word") . thing-cut-word)
   (("S" . "Cut Symbol") . thing-cut-symbol)
   (("M" . "Cut Email") . thing-cut-email)
   (("O" . "Cut Filename") . thing-cut-filename)
   (("U" . "Cut URL") . thing-cut-url)
   (("X" . "Cut Sexp") . thing-cut-sexp)
   (("G" . "Cut Page") . thing-cut-page)
   (("H" . "Cut Buffer") . thing-cut-whole-buffer)
   (("T" . "Cut Sentence") . thing-cut-sentence)
   (("I" . "Cut List") . thing-cut-list)
   (("C" . "Cut Comment") . thing-cut-comment)
   (("F" . "Cut Function") . thing-cut-defun)
   (("P" . "Cut Parentheses") . thing-cut-parentheses)
   (("L" . "Cut Line") . thing-cut-line)
   (("A" . "Cut To Line Begin") . thing-cut-to-line-beginning)
   (("E" . "Cut To Line End") . thing-cut-to-line-end)
   )
 t)

(global-set-key (kbd "C-c SPC") 'one-key-menu-thing-edit)

#+end_src

** rainbow delimiters(parenthesis)
((t
  (:weight ultra-bold :foreground "#ff6c6b" :background "#1B2229")))
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t
              show-paren-delay 0.01
              rainbow-delimiters-max-face-count 6))
;; don't you think it's a little to shine? no. useful in lisp programming.
(use-package rainbow-delimiters
  :config
  ;; (set-face-foreground 'rainbow-delimiters-depth-1-face "DarkOrange") ;lazycat
  ;; (set-face-foreground 'rainbow-delimiters-depth-2-face "DeepSkyBlue")
  ;; (set-face-foreground 'rainbow-delimiters-depth-3-face "DarkRed")
  (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "lime green")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "gold")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "DodgerBlue1")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "lime green")

  (set-face-attribute 'rainbow-delimiters-depth-1-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil :weight 'thin)
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
   ;;   (text-mode . rainbow-delimiters-mode)
   ))

(run-with-timer 2 0 #'(lambda ()
                        (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
                        (set-face-foreground 'rainbow-delimiters-depth-4-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-5-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-6-face "lime green")
                        (set-face-foreground 'rainbow-delimiters-depth-7-face "gold")
                        (set-face-foreground 'rainbow-delimiters-depth-8-face "DodgerBlue1")
                        (set-face-foreground 'rainbow-delimiters-depth-9-face "lime green")

                        (set-face-attribute 'rainbow-delimiters-depth-1-face nil :weight 'ultra-heavy)
                        (set-face-attribute 'rainbow-delimiters-depth-2-face nil :weight 'ultra-heavy)
                        (set-face-attribute 'rainbow-delimiters-depth-3-face nil :weight 'ultra-heavy)
                        (set-face-attribute 'rainbow-delimiters-depth-4-face nil :weight 'thin)
                        (set-face-attribute 'rainbow-delimiters-depth-5-face nil :weight 'thin)
                        (set-face-attribute 'rainbow-delimiters-depth-6-face nil :weight 'thin)
                        (set-face-attribute 'rainbow-delimiters-depth-7-face nil :weight 'ultra-heavy)
                        (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)
                        (set-face-attribute 'rainbow-delimiters-depth-8-face nil :weight 'ultra-heavy)))
#+end_src

** rainbow cursor
#+begin_src emacs-lisp
;; we don't want the cursor vanish
(blink-cursor-mode -1)
(set-cursor-color "gold")

(defvar rainbow-cursor-timer nil)
(setq rainbow-cursor-color-list (vector"#FF0000";red
		                               "#FF5000"
		                               "#FF9F00";orange
		                               "#FFFF00";yellow
		                               "#BFFF00"
		                               "#00FF00";green
		                               "#00FFFF";
		                               "#0088FF"
		                               "#0000FF";blue
		                               "#5F00FF"
		                               "#8B00FF";purple
		                               "#CF00FF"
		                               "#FF0088"
		                               ))
(setq rainbow-cursor-color-pointer 1)
(defun rainbow-cursor-change-color ()
  "Take a color from `rainbow-color-list' by the pointer.
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (elt rainbow-cursor-color-list
                         rainbow-cursor-color-pointer)))


(defun rainbow-cursor-disable ()
  ""
  (interactive)
  (when rainbow-cursor-timer
    (cancel-timer rainbow-cursor-timer)
    (setq rainbow-cursor-timer nil)))

(defun rainbow-cursor-enable ()
  ""
  (interactive)
  (rainbow-cursor-disable)
  (setq rainbow-cursor-timer
        (run-with-timer 0 0.05 #'rainbow-cursor-change-color)))

(rainbow-cursor-enable)

    #+end_src


** pretty symbol characters
#+begin_src emacs-lisp
(use-package prettify-greek)
(use-package prettify-math)
(setq-default prettify-symbols-alist prettify-greek-lower)
;;(global-prettify-symbols-mode 1)
;;(global-prettify-math-mode)
(dolist (hook '(prog-mode-hook
                shell-mode-hook
                text-mode-hook))
  (add-hook hook #'(lambda ()
                     (prettify-symbols-mode 1))))
#+end_src

** scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-step 2
      ;; scroll-margin 2
      ;; hscroll-step 2
      ;; hscroll-margin 2
      scroll-conservatively 0)
;;      scroll-preserve-screen-position 'always
(pixel-scroll-precision-mode 1)
#+END_SRC



** indent
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; (defun adjust-languages-indent (n)
;;   (setq-local c-basic-offset n)

;;   (setq-local coffee-tab-width n)
;;   (setq-local javascript-indent-level n)
;;   (setq-local js-indent-level n)
;;   (setq-local js2-basic-offset n)

;;   (setq-local web-mode-attr-indent-offset n)
;;   (setq-local web-mode-attr-value-indent-offset n)
;;   (setq-local web-mode-code-indent-offset n)
;;   (setq-local web-mode-css-indent-offset n)
;;   (setq-local web-mode-markup-indent-offset n)
;;   (setq-local web-mode-sql-indent-offset n)

;;   (setq-local css-indent-offset n))

;; (dolist (hook (list
;;                'c-mode-hook
;;                'c++-mode-hook
;;                'java-mode-hook
;;                'haskell-mode-hook
;;                'asm-mode-hook
;;                'sh-mode-hook
;;                'haskell-cabal-mode-hook
;;                'ruby-mode-hook
;;                'qml-mode-hook
;;                'scss-mode-hook
;;                'coffee-mode-hook
;;                ))
;;   (add-hook hook #'(lambda ()
;;                      (setq indent-tabs-mode nil)
;;                      (adjust-languages-indent 4)
;;                      )))

;; (dolist (hook (list
;;                'web-mode-hook
;;                'js-mode-hook
;;                ))
;;   (add-hook hook #'(lambda ()
;;                      (setq indent-tabs-mode nil)
;;                      (adjust-languages-indent 2)
;;                      )))

#+end_src

** keyboard input method
*** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
;; (pyim-default-scheme 'pyim-shuangpin)
;; (pyim-default-scheme 'xiaohe-shuangpin)
;; (if (posframe-workable-p)
;;     (setq pyim-page-tooltip 'posframe)
;;   (setq pyim-page-tooltip 'popup))
(setq pyim-page-length 7)
(setq pyim-cloudim 'google)
(setq pyim-process-async-delay 0.1
      pyim-process-run-delay 0.1)
;; (setq pyim-indicator-list (list #'pyim-indicator-with-posframe))
(setq pyim-indicator-list nil)
;; (setq pyim-punctuation-half-width-functions t)
(setq pyim-punctuation-dict nil)        ;disable chinese punctuation.

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
(add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-tsinghua-dict")
(require 'pyim-tsinghua-dict)
(pyim-tsinghua-dict-enable)
(require 'pyim-cstring-utils)
;; (keymap-set 'global-key-map "<remap> <forward-word>" 'pyim-forward-word)
;; (global-set-key (kbd "M-f") 'pyim-forward-word)
;; (global-set-key (kbd "M-b") 'pyim-backward-word)

(defun my-orderless-regexp (orig-func component)
  (let ((result (funcall orig-func component)))
    (pyim-cregexp-build result)))

(advice-add 'orderless-regexp :around #'my-orderless-regexp)
#+end_src

** server
#+begin_src emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+end_src

** eaf not working? or not intuitive.
#+begin_src emacs-lisp
#+end_src
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :custom
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser))

(require 'eaf-vue-demo)
;;(require 'eaf-git)
(require 'eaf-pdf-viewer)
(require 'eaf-image-viewer)
(require 'eaf-video-player)
;;(require 'eaf-terminal)
(require 'eaf-browser)
(require 'eaf-rss-reader)
(require 'eaf-file-browser)

(defalias 'browse-web #'eaf-open-browser)

;; (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex --synctex=1%(mode)%' %t" TeX-run-TeX nil t))
;; (add-to-list 'TeX-view-program-list '("eaf" eaf-pdf-synctex-forward-view))
;; (add-to-list 'TeX-view-program-selection '(output-pdf "eaf"))




* RECALL the structure of our magic array
** ORG MODE
*** org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  (org-directory "~/org/")
  (org-default-notes-file (expand-file-name "notes.org" org-directory))
  ;; prettify
  (org-startup-indented t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  (org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+")))
  ;; image
  (org-image-actual-width nil)
  (org-display-remote-inline-images 'cache)
  ;; more user-friendly
  (org-clone-delete-id t)
  (org-use-sub-superscripts '{})
  (org-yank-adjusted-subtrees t)
  (org-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content t)
  ;; call C-c C-o explicitly
  (org-return-follows-link nil)
  ;; todo
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELLED(c@/!)")))

  (org-todo-keyword-faces '(("TODO"       :foreground "#feb24c" :weight bold)
                            ("DONE"       :foreground "#50a14f" :weight bold)
                            ("CANCELLED"  :foreground "#ff6480" :weight bold)))
  (org-use-fast-todo-selection 'auto)   ;expert
  (org-enforce-todo-dependencies nil)
  (org-enforce-todo-checkbox-dependencies t)
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                           ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                           ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (org-closed-keep-when-no-todo t)      ;wt
  ;; log
  (org-log-repeat 'time)
  (org-log-into-drawer t)
  ;; tags, e.g. #+TAGS: keyword in your file
  (org-use-tag-inheritance nil)
  ;; (org-use-fast-tag-selection t)        ;wt
  ;; (org-fast-tag-selection-single-key t)
  ;; archive
  ;; (org-archive-location "%s_archive::datetree/")
  ;; id
  ;; (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  ;; abbreviation for url
  (org-link-abbrev-alist '(("GitHub" . "https://github.com/") ;wt
                           ("GitLab" . "https://gitlab.com/")
                           ("Google" . "https://google.com/search?q=")
                           ("RFCs"   . "https://tools.ietf.org/html/")
                           ("LWN"    . "https://lwn.net/Articles/")
                           ("WG21"   . "https://wg21.link/"))))

;; (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>") 
;;                                  ("/" italic "<i>" "</i>")
;;                                  ("_" underline "<span 
;; style=\"text-decoration:underline;\">" "</span>")
;;                                  ("=" org-code "<code>" "</code>"
;;                  verbatim)
;;                                  ("~" org-verbatim "<code>" "</code>"
;;                  verbatim)
;;                                  ("+" (:strike-through t) "<del>" "</del>")
;;                                  ("@" org-warning "<b>" "</b>")))
;;       org-export-latex-emphasis-alist (quote 
;;                                        (("*" "\\textbf{%s}" nil)
;;                                         ("/" "\\emph{%s}" nil) 
;;                                         ("_" "\\underline{%s}" nil)
;;                                         ("+" "\\texttt{%s}" nil)
;;                                         ("=" "\\verb=%s=" nil)
;;                                         ("~" "\\verb~%s~" t)
;;                                         ("@" "\\alert{%s}" nil))))

;; (setq org-startup-folded 'show2levels)
#+end_src

*** outfit
**** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭")
        org-ellipsis " ▼"))

  #+END_SRC

**** cycle
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab t
  org-cycle-global-at-bob t
  )

(require 'org-tempo)

#+END_SRC

*** agenda
#+begin_src emacs-lisp
(setq org-agenda-include-diary nil)
  ;; (org-agenda-files (list (expand-file-name "tasks.org" org-directory)))
  ;; (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  ;; (org-agenda-insert-diary-extract-time t)
  ;; (org-agenda-inhibit-startup t)
  ;; (org-agenda-time-leading-zero t)
  ;; (org-agenda-remove-tags t)
  ;; (org-agenda-columns-add-appointments-to-effort-sum t)
  ;; (org-agenda-restore-windows-after-quit t)
  ;; (org-agenda-window-setup 'current-window)

#+end_src

*** refile
#+begin_src emacs-lisp
  ;; refile
(setq org-log-refile nil)
(setq org-refile-targets '((nil . (:level . 1))
                           (nil . (:level . 2))
                           (nil . (:level . 3))))

#+end_src



*** export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)

(with-eval-after-load 'org
  (setq org-odt-preferred-output-format "docx") ;ODT转换格式默认为docx
  (setq org-startup-folded nil)                 ;默认展开内容

  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory lazycat-emacs-root-dir)
                                 (file-name-as-directory "template")
                                 "template.docx")))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file))))

;; (use-package ox-reveal
;;   :commands (org-reveal)
;;   :init
;;   (add-hook 'after-init-hook #'org-reveal)
;;   :config
;;   (setq org-reveal-root "~/.reveal.js"
;;    org-reveal-theme "moon"
;;    org-reveal-plugins '(classList markdown zoom notes)
;;    ))

(setq org-export-headline-levels 1
      org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-html-checkbox-type 'html
      org-html-doctype "html5"
      org-html-html5-fancy t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))

;; (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f" "xelatex -interaction nonstopmode %f"))
;; (setq org-export-allow-bind-keywords t)
 #+END_SRC


*** org-src
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map "\C-c\C-c" 'org-edit-src-exit)
(setq org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (C          . t)
                               (python     . t)
                               (shell      . t)
                               (latex      . t)
                               (dot        . t)

                               ))
 #+END_SRC

*** mouse
#+begin_src emacs-lisp
(setq org-mouse-features '(activate-checkboxes))
#+end_src
** structured text(md, rst)
#+begin_src emacs-lisp
;; Pixel alignment for org/markdown tables
(use-package valign
  :ensure t
  :hook ((markdown-mode org-mode) . valign-mode))

(use-package markdown-mode
  :ensure t
  :init
  (advice-add #'markdown--command-map-prompt :override #'ignore)
  (advice-add #'markdown--style-map-prompt   :override #'ignore)
  :mode ("README\\(?:\\.md\\)?\\'" . gfm-mode)
  :hook (markdown-mode . visual-line-mode)
  :bind (:map markdown-mode-style-map
         ("r" . markdown-insert-ruby-tag)
         ("d" . markdown-insert-details))
  :config
  (defun markdown-insert-ruby-tag (text ruby)
    "Insert ruby tag with `TEXT' and `RUBY' quickly."
    (interactive "sText: \nsRuby: \n")
    (insert (format "<ruby>%s<rp>(</rp><rt>%s</rt><rp>)</rp></ruby>" text ruby)))

  (defun markdown-insert-details (title)
    "Insert details tag (collapsible) quickly."
    (interactive "sTitle: ")
    (insert (format "<details><summary>%s</summary>\n\n</details>" title)))
  :custom
  (markdown-header-scaling t)
  (markdown-enable-wiki-links t)
  (markdown-italic-underscore t)
  (markdown-asymmetric-header t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-fontify-code-blocks-natively t))

;; ReStructuredText
(use-package rst
  :ensure nil
  :hook ((rst-mode . visual-line-mode)
         (rst-adjust . rst-toc-update)))

#+end_src


** ansi color
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))


** latex
#+begin_src emacs-lisp

#+end_src
** directory(dired neotree)
#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t
      dired-auto-revert-buffer #'dired-directory-changed-p
      dired-hide-details-hide-symlink-targets nil)
(setq dired-listing-switches "-AFhlv")  ;wt

;; dired font lock
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))

(use-package neotree)
(global-set-key [f8] 'neotree-toggle)
#+end_src



** project and file's magic
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (dolist (dir '("bazel-bin"            ;what's this?
                 "bazel-out"
                 "bazel-testlogs"))
    (add-to-list 'projectile-globally-ignored-directories dir))
  :custom
  (projectile-use-git-grep t)
  (projectile-indexing-method 'alien)   ;default is alien
  )


(use-package ripgrep)

#+END_SRC

** cc mode
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook 'c-toggle-auto-hungry-state)
;;(remove-hook 'c-mode-common-hook 'cc-mode)

;; A compiler output viewer
(use-package rmsbolt
  :commands rmsbolt-compile
  :custom
  (rmsbolt-asm-format nil)
  (rmsbolt-default-directory "/tmp"))

;; Parser generator
(use-package bison-mode)

;; cmake, the de factor build system for C++
(use-package cmake-mode)

;; Extra font locks for cmake
(use-package cmake-font-lock
  :hook (cmake-mode cmake-font-lock-activate))

;; (dolist (hook (list
;;                'c-mode-hook
;;                'c++-mode-hook
;;                'c-mode-common-hook
;;                ))
;;   (add-hook hook #'(lambda ()
;;                      (require 'cc-mode)
;;                      (require 'modern-cpp-font-lock)

;;                      (defun c-mode-style-setup ()
;;                        (interactive)
;;                        ;; cpp font lock.
;;                        (modern-c++-font-lock-global-mode t)

;;                        ;; base-style
;;                        ;; (c-set-style "stroustrup")

;;                        ;; qt keywords and stuff ...
;;                        ;; set up indenting correctly for new qt kewords
;;                        (setq c-protection-key (concat "\\<\\(public\\|public slot\\|protected"
;;                                                       "\\|protected slot\\|private\\|private slot"
;;                                                       "\\)\\>")
;;                              c-C++-access-key (concat "\\<\\(signals\\|public\\|protected\\|private"
;;                                                       "\\|public slots\\|protected slots\\|private slots"
;;                                                       "\\)\\>[ \t]*:"))
;;                        (progn
;;                          ;; modify the colour of slots to match public, private, etc ...
;;                          (font-lock-add-keywords 'c++-mode
;;                                                  '(("\\<\\(slots\\|signals\\)\\>" . font-lock-type-face)))
;;                          ;; make new font for rest of qt keywords
;;                          (make-face 'qt-keywords-face)
;;                          (set-face-foreground 'qt-keywords-face "DeepSkyBlue1")
;;                          ;; qt keywords
;;                          (font-lock-add-keywords 'c++-mode
;;                                                  '(("\\<Q_OBJECT\\>" . 'qt-keywords-face)))
;;                          (font-lock-add-keywords 'c++-mode
;;                                                  '(("\\<SIGNAL\\|SLOT\\>" . 'qt-keywords-face)))
;;                          (font-lock-add-keywords 'c++-mode
;;                                                  '(("\\<Q[A-Z][A-Za-z]\\>" . 'qt-keywords-face)))
;;                          ))
;;                      (c-mode-style-setup))))
#+end_src

** scheme
#+begin_src emacs-lisp
(use-package geiser)
(use-package geiser-guile)
(use-package geiser-mit)

(setq geiser-active-implementations '(guile))
(setq geiser-mode-start-repl-p t)
(setq geiser-mode-eval-last-sexp-to-buffer t)     
(setq geiser-mode-eval-to-buffer-prefix "\n;;=> ")
#+end_src

** lisp
#+begin_src emacs-lisp
;; elisp
(defconst eval-as-comment-prefix ";;=> ")
;; Imitate scala-mode
;; from https://github.com/dakra/dmacs
(defun eval-to-comment (&optional arg)
  (interactive "P")
  (let ((start (point)))
    (eval-print-last-sexp arg)
    (save-excursion
      (goto-char start)
      (save-match-data
        (re-search-forward "[[:space:]\n]+" nil t)
        (insert eval-as-comment-prefix)))))

(define-key emacs-lisp-mode-map "\C-c\C-b" 'eval-buffer)
(define-key emacs-lisp-mode-map "\C-c\C-c" 'eval-to-comment)
(define-key lisp-interaction-mode-map "\C-c\C-c" 'eval-to-comment)

(defun tu10ng/sharp-quote ()
  "Insert #' unless in a string or comment."
  (interactive)
  (call-interactively #'self-insert-command)
  (let ((ppss (syntax-ppss)))
    (unless (or (elt ppss 3)
                (elt ppss 4)
                (eq (char-after) ?'))
      (insert ?'))))

(define-key emacs-lisp-mode-map "#" #'tu10ng/sharp-quote)

(use-package ielm
  :ensure nil
  :hook (ielm-mode . company-mode))

(use-package slime)
(setq inferior-lisp-program "sbcl")

#+end_src



** python
#+begin_src emacs-lisp
(use-package python
  :custom
  (python-indent-guess-indent-offset-verbose nil))

;; python -m venv ENV_DIR
(use-package pyvenv
  :commands pyvenv-deactivate pyvenv-deactivate)


#+end_src

** haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :hook ((haskell-mode . haskell-indentation-mode)
         (haskell-mode . haskell-doc-mode))
  :custom
  (haskell-completing-read-function 'completing-read)
  (haskell-process-check-cabal-config-on-load nil)
  (haskell-process-suggest-add-package nil)
  (haskell-process-suggest-hoogle-imports nil)
  (haskell-process-suggest-language-pragmas nil)
  (haskell-process-suggest-overloaded-strings nil)
  (haskell-process-suggest-restart nil))


#+end_src



** rust
#+begin_src emacs-lisp
(use-package rust-mode
  :custom
  (rust-format-on-save (executable-find "rustfmt")))

;; Cargo integration
(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
#+end_src

** makefile
#+begin_src emacs-lisp
(defun tu10ng/makefile-dollar-paren (ch)
  "command when pressed $. if ch ALPHA, Insert $(CH, otherwise $CH, like $<."
  (interactive "cvar?:")
  (unless (eq (char-after) ?\()
    (unless (or (< ch ?A)                   ;like <
                (and (> ch ?Z)
                     (< ch ?a))
                (> ch ?z))
      (insert ?\())
    (if (= ch ?)
        (call-interactively #'backward-delete-char-untabify)
      (insert ch))))

(with-eval-after-load 'make-mode
  (define-key makefile-mode-map "$" #'(lambda ()
                                        (interactive)
                                        (self-insert-command 1)
                                        (call-interactively #'tu10ng/makefile-dollar-paren))))


#+end_src

** other modes
#+begin_src emacs-lisp
(use-package fish-mode)
(use-package fish-completion)
(global-fish-completion-mode)
(use-package lox-mode)
(use-package php-mode)
(use-package crontab-mode)
(use-package graphviz-dot-mode)
(use-package json-mode)
(use-package csharp-mode)
(use-package gnuplot)
(use-package peg)
;;  (use-package pdf-tools)

;;  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
;;  (require 'css-sort-buffer)

#+end_src

** sql
#+begin_src emacs-lisp
(require 'sql)
(defalias 'sql-get-login 'ignore)

(use-package sqlup-mode)
(add-hook 'sql-mode-hook #'sqlup-mode)

#+end_src
** www
#+begin_src emacs-lisp
(use-package eww
  :config
  (defun eww-open-this-file ()
    (interactive)
    (if (buffer-file-name)
        (eww-open-file (buffer-file-name))
      (call-interactively 'eww))))

#+end_src



** IRC
#+begin_src emacs-lisp
(use-package circe)
(setq circe-default-nick "tu10ng")
#+end_src

u10ng
** rss
#+begin_src emacs-lisp
#+end_src
(use-package elfeed)
(global-set-key (kbd "C-c w") 'elfeed)
(setq elfeed-feeds
      '(
        "http://arxiv.org/rss/cs"
        "http://nullprogram.com/feed/"
        "https://planet.emacslife.com/atom.xml"
        "https://mkq.nm.cn/rss.xml"
        ;; "https://emacs-china.org/posts.rss"
        ;; "https://emacs-china.org/latest.rss"
        ))
(setf url-queue-timeout 30)
(define-key elfeed-search-mode-map "o" 'elfeed-search-show-entry)
(define-key elfeed-search-mode-map "w" 'elfeed-search-yank)





** games
#+begin_src emacs-lisp
(use-package figlet)
(use-package speed-type)
;;(use-package typit)
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/typit/")
;; (setq typit-test-time (* 5 60)
;;       typit-display-method 'display-buffer-at-bottom)



(defun tu10ng/speed-type-buffer-n (n)
  "type N chars starting from random point in current buffer. if current buffer has char less than n, use the whole buffer. "
  (interactive "P")
  (if n
      (unless (< (point-max) n)
        (let ((start (random (- (point-max) n))))
          (speed-type--setup
           (buffer-substring-no-properties start
                                           (+ start n)))))
    (speed-type-buffer 1)))

(defvar tu10ng/typegame-tmpfile "/tmp/typegame")

(defun tu10ng/typegame (&optional char path ext)
  "find all file recursively in PATH with extension EXT(string without leading point, like 'c'), concat into a file, open first CHAR chars for `speed-type'.
Call `tu10ng/speed-type-buffer-n' to set a new buffer for typing."
  ;; (interactive "Dpath?:")
  (interactive)
  (let* ((char (if char char 1000))
         (path (if path path "~/Downloads/requests"))
         (ext (if ext ext "py")))
    (shell-command (concat "fish -c 'fd . " path " --extension " ext " | xargs cat > " tu10ng/typegame-tmpfile "'"))
    ;; failure
    (if (f-empty? tu10ng/typegame-tmpfile)
        (format "no files found or maybe are empty.")
      ;; `find-file' is unbearably slow
      (find-file-literally "/tmp/typegame")
      (goto-char 0)
      (replace-string "  " "")
      ;; execute from current point, need reset point to act on whole buffer
      ;; comments should stay
      ;; c has two var for comment `comment-start' `c-line-comment-starter', and the spacing after comment makes it hard to auto remove comment.
      ;; maybe we can set `comment-start' for the tmpfile.
      ;; only for c
      (goto-char 0)    
      (replace-string "// " "")
      (goto-char 0)
      (replace-string "//" "")
      (goto-char 0)
      (replace-string "

" "
")                                   ;is this the only way?
      (save-buffer)
      (tu10ng/speed-type-buffer-n char)
      (kill-buffer "typegame"))))

;;(setq typit-line-length (window-width))
(use-package zone-nyan
  :defer t)
(use-package autotetris-mode
  :defer t)
(use-package flames-of-freedom
  :defer t)

#+end_src

* casting magic
** our loyal assistent carrying all our books
#+begin_src emacs-lisp
(use-package xref
  :init
  ;; On Emacs 28, `xref-search-program' can be set to `ripgrep'.
  ;; `project-find-regexp' benefits from that.
  (setq xref-search-program 'ripgrep)
  (setq xref-show-xrefs-function #'xref-show-definitions-completing-read)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  :hook ((xref-after-return xref-after-jump) . recenter))

;; (use-package dumb-jump
;;   :init
;;   (add-hook 'xref-backend-functions #'dumb-jump-xref-activate t)
;;   :bind (("M-g j" . dumb-jump-go)
;;          ("M-g J" . dumb-jump-go-other-window))
;;   :custom
;;   (dumb-jump-quiet t)
;;   (dumb-jump-aggressive t)
;;   (dumb-jump-selector 'completing-read))

(use-package tree-sitter)
(use-package tree-sitter-langs)
(require 'tree-sitter-hl)
(require 'tree-sitter-debug)
(require 'tree-sitter-query)

;;; Code:
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
;; (use-package citre
;;   :init
;;   (require 'citre-config)
;;   (global-set-key (kbd "M-.") 'citre-ace-peek)
;;   (global-set-key (kbd "M-,") 'citre-peek-restore)
;;   :bind (("C-c d c" . citre-update-this-tags-file))
;;   :custom
;;   (citre-prompt-language-for-ctags-command t)
;;   (citre-ctags-program (executable-find "ctags"))
;;   (citre-readtags-program (executable-find "readtags"))
;;   :config
;;   (setq
;;    citre-project-root-function #'projectile-project-root
;;    citre-default-create-tags-file-location 'global-cache
;;    citre-use-project-root-when-creating-tags t
;;    citre-prompt-language-for-ctags-command t
;;    )

;;   (defun citre-jump+ ()
;;     (interactive)
;;     (condition-case _
;;         (citre-jump)
;;       (error (let* ((xref-prompt-for-identifier nil))
;;                (call-interactively #'xref-find-definitions)))))
;;   )

;; Browse devdoc.io
(use-package devdocs
  :ensure t
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex)))))

;; Return symbol class characters for symbol S.
;;
;; Function:
;; f function
;; c command
;; C interactive-only command
;; m macro
;; M special-form
;; g cl-generic
;; p pure
;; s side-effect-free
;; @ autoloaded
;; ! advised
;; - obsolete
;;
;; Variable:
;; u custom (U modified compared to global value)
;; v variable
;; l local (L modified compared to default value)
;; - obsolete
;;
;; Other:
;; a face
;; t cl-type"
(use-package marginalia

  :init
  (marginalia-mode))

;; Insert SPDX license header
;; (use-package spdx
;;   :hook (prog-mode . spdx-tempo-setup)
;;   :custom
;;   (spdx-ignore-deprecated t))

;; tldr man info
(use-package tldr)

;; I would use grep for searching TODO

;; I will not enable whitespace-mode. I only need a tool that automaticly remove spaces, but keep the spaces around my cursor for about five lines to not disturb typing.

;; a tool for hiding code blocks is `hideshow'
#+end_src

** choosing your lyrics
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode 1)

(dolist (hook (list 'term-mode-hook))
  (add-hook hook #'(lambda () (yas-minor-mode -1))))


#+end_src

*** documentation
#+begin_src emacs-lisp
(use-package separedit
  :bind (:map prog-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'markdown-mode)
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-continue-fill-column t)
  (separedit-buffer-creation-hook #'auto-fill-mode))


#+end_src


*** pastebin service
#+begin_src emacs-lisp
(use-package webpaste
  :ensure t
  :commands webpaste-paste-buffer-or-region
  :custom
  (webpaste-open-in-browser t)
  (webpaste-paste-confirmation t)
  (webpaste-add-to-killring nil)
  (webpaste-provider-priority '("paste.mozilla.org" "dpaste.org" "ix.io")))

#+end_src
*** language difference(web search &web translate)
#+begin_src emacs-lisp
;; Web search
(use-package webjump
  :ensure nil
  ;; C-c / will be shadowed by `org-sparse-tree' in org-mode
  :bind ("C-c C-/" . webjump)
  :custom
  (webjump-sites '(;; Internet search engines.
                   ("Google" .
                    [simple-query "www.google.com"
                                  "www.google.com/search?q=" ""])
                   ("Wikipedia" .
                    [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""])
                   ("Ludwig Guru" .
                    [simple-query "ludwig.guru" "ludwig.guru/s/" ""])
                   ("Stack Overflow" .
                    [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
                   ("Man Search" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" ""])
                   ("Man Go" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" "&go=Go"])

                   ;; Language specific engines.
                   ("x86 Instructions Reference" .
                    [simple-query "www.felixcloutier.com"
                                  "www.felixcloutier.com/x86/" ""]))))

#+end_src
*** translate
#+begin_src emacs-lisp

;; M-x fanyi-dwim{,2}, that's all.
(use-package fanyi
  :ensure t
  :commands fanyi-dwim fanyi-dwim2)

(use-package youdao-dictionary
  :bind (("M-s" . youdao-dictionary-search-at-point+)))

(defun mkq/q-trans ()
  "simple translate function"
  (interactive)
  (message
   (shell-command-to-string
    (concat "trans " (downcase (thing-at-point 'word)) " | head -n 3"))))
#+end_src



** forming
learn from lazy-cat's thing-edit and move-text
one key
#+begin_src emacs-lisp
(setq next-error-recenter 25)

(add-to-list 'load-path "~/.emacs.d/site-lisp/move-text/")
(add-to-list 'load-path "~/.emacs.d/site-lisp/move-text/")
(require 'move-text)
(global-set-key (kbd "M-<up>") 'move-text-up)
(global-set-key (kbd "M-<down>") 'move-text-down)

(add-to-list 'load-path "~/.emacs.d/site-lisp/duplicate-line/")
(require 'duplicate-line)

;; ch source code.
(global-set-key (kbd "C-M-p") 'duplicate-line-or-region-above)
(global-set-key (kbd "C-M-n") 'duplicate-line-or-region-below)

;; `widget-forward' `forward-button'
()


#+end_src

** step by step we strengthen our spell
*** magit
#+begin_src emacs-lisp
(use-package magit
;;  :hook (git-commit-setup . git-commit-turn-on-flyspell)
  :custom
  (magit-diff-refine-hunk t)            ;what's this?
  (magit-diff-paint-whitespace nil)
  )

(setq magit-commit-ask-to-stage nil)    ;don't ask stage question

;; `magit-find-file' used to view file in another branch
(global-unset-key (kbd "C-x m"))
(global-set-key (kbd "C-x mf") #'magit-find-file)
(global-set-key (kbd "C-c g") #'magit-file-dispatch)

(use-package vc
  :custom
  (vc-follow-symlinks t)
  (vc-allow-async-revert t)
  (vc-handled-backends '(Git)))

;; useless and disturbing
;; Highlight uncommitted changes using VC
;; (use-package diff-hl
;;   :ensure t
;;   :hook ((after-init         . global-diff-hl-mode)
;;          (dired-mode         . diff-hl-dired-mode-unless-remote)
;;          (magit-pre-refresh  . diff-hl-magit-pre-refresh)
;;          (magit-post-refresh . diff-hl-magit-post-refresh))
;;   :config
;;   ;; When Emacs runs in terminal, show the indicators in margin instead.
;;   (unless (display-graphic-p)
;;     (diff-hl-margin-mode)))

;; Visual diff interface
(use-package ediff                ;what's this?
  ;; Restore window config after quitting ediff
  :hook ((ediff-before-setup . ediff-save-window-conf)
         (ediff-quit         . ediff-restore-window-conf))
  :config
  (defvar local-ediff-saved-window-conf nil)

  (defun ediff-save-window-conf ()
    (setq local-ediff-saved-window-conf (current-window-configuration)))

  (defun ediff-restore-window-conf ()
    (when (window-configuration-p local-ediff-saved-window-conf)
      (set-window-configuration local-ediff-saved-window-conf)))
  :custom
  (ediff-highlight-all-diffs t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally))

;; will this be influenced by ping?
(use-package browse-at-remote
  :bind (:map vc-prefix-map
         ("b" . bar-browse)         ;; was `vc-switch-backend'
         ("c" . bar-to-clipboard))
  :custom
  (browse-at-remote-add-line-number-if-no-region-selected nil))

;; Setup gitignore mode
(use-package conf-mode
  :ensure nil
  :mode (("\\.gitignore\\'"     . conf-unix-mode)
         ("\\.gitconfig\\'"     . conf-unix-mode)
         ("\\.gitattributes\\'" . conf-unix-mode)))


#+end_src

*** working with other magicians
#+begin_src emacs-lisp
(use-package editorconfig)
(editorconfig-mode 1)

#+end_src



** see the power of spell
*** compile
#+begin_src emacs-lisp
;; Compilation Mode
(use-package compile
  :ensure nil
  :hook (compilation-filter . colorize-compilation-buffer)
  :config
  (defun colorize-compilation-buffer ()
    "ANSI coloring in compilation buffers."
    (with-silent-modifications
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  :custom
  (compilation-always-kill t)
  (compilation-scroll-output t)
  ;; Save all buffers on M-x `compile'
  (compilation-ask-about-save nil))


#+end_src

*** quickrun
#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  :bind ("C-c C-r" . quickrun)
  )
(setq quickrun-timeout-seconds 5)

#+end_src



*** flycheck
#+BEGIN_SRC emacs-lisp
;; flycheck
(use-package flycheck
  ;; :hook (prog-mode . flycheck-mode)
  :custom
  ;;   (flycheck-temp-prefix ".flycheck")
  (flycheck-emacs-lisp-load-path 'inherit)
  ;;   (flycheck-indication-mode 'left-fringe)
  (flycheck-idle-change-delay 0.3)
  (flycheck-idle-buffer-switch-delay 0.1)
  (flycheck-display-errors-delay 2))

(use-package flycheck-popup-tip)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-popup-tip-mode))

;; I don't like `global-flycheck-mode', some mode, such as elisp mode don't need.
;; (dolist (hook (list
;;                'sh-mode-hook
;;                'fish-mode-hook
;;                'c-mode-common-hook
;;                'python-mode-hook
;;                'verilog-mode-hook
;;                'js-mode-hook
;;                ))
;;   (add-hook
;;    hook
;;    #'(lambda ()
;;        (require 'flycheck)
;;        (setq-default flycheck-disabled-checkers ;disable jshint since we prefer eslint checking
;;                      (append flycheck-disabled-checkers
;;                              '(javascript-jshint)))
;;        (flycheck-mode 1))))

(global-flycheck-mode)
;; (use-package flycheck-clangcheck)
;; (defun tu10ng/flycheck-clangcheck-select ()
;;   "Select clangcheck for flycheck's checker, for detecting compile-commands.json."
;;   (flycheck-set-checker-executable 'c/c++-clangcheck
;;                                    "/usr/bin/clang-check")
;;   (flycheck-select-checker 'c/c++-clangcheck))

;; (add-hook 'c-mode-hook #'tu10ng/flycheck-clangcheck-select)
;; (add-hook 'c++-mode-hook #'tu10ng/flycheck-clangcheck-select)

;; ;; enable static analysis
;; (setq flycheck-clangcheck-analyze t)  
  #+END_SRC

** EXPLOSION!
*** gud
maybe use gdb in terminal is better for asm view.
#+begin_src emacs-lisp
(setq gdb-show-main t
      gdb-restore-window-configuration-after-quit t
      )

(gud-tooltip-mode 1)
#+end_src
*** [[https://github.com/realgud/realgud][readgud]]
maybe realgud is better  
#+begin_src emacs-lisp
(use-package realgud)

#+end_src






