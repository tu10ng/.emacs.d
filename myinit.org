
* PREPARE the truck to magic world
** BENCHMARK
#+begin_src emacs-lisp
;; in GNU Emacs 29.0.50, a function used by benchmark turn it's required arguments from 2 to 3, thus need manually change the package source.
(use-package benchmark-init)
(benchmark-init/activate)
#+end_src
** native compilation
#+begin_src emacs-lisp
(setq comp-deferred-compilation t
      package-native-compile t
)

#+end_src
** Try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

** posframe
#+BEGIN_SRC emacs-lisp
  (use-package posframe)
 #+END_SRC
** file on change
#+begin_src emacs-lisp
 (setq make-backup-files nil)

;; Update buffer whenever file changes
;; Also revert dired buffer.
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))

;; auto save when idle
(setq auto-save-default nil)
(setq auto-save-idle 1)
(defun auto-save-buffers ()
  (interactive)
  (let ((auto-save-buffer-list))
    (save-excursion
      (dolist (buf (buffer-list))
	(set-buffer buf)
	(if (and (buffer-file-name) (buffer-modified-p))
	    (progn
	      (push (buffer-name) auto-save-buffer-list)
	      (with-temp-message "" (basic-save-buffer))
	      ))))))

(defun auto-save-enable ()
  (interactive)
  (run-with-idle-timer auto-save-idle t #'auto-save-buffers))

(auto-save-enable)

#+end_src
** connection between session 
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :defer t
  )

(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))

;; Back to the previous position
(use-package saveplace
  :hook (after-init . save-place-mode))

(use-package recentf
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '( ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))

#+END_SRC

** misc
#+begin_src emacs-lisp
(setq garbage-collection-messages t
      large-file-warning-threshold nil
      confirm-kill-processes nil
      shift-select-mode nil
      shell-command-prompt-show-cwd 1)

(setq initial-scratch-message nil
      initial-buffer-choice nil)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)
(defun startup-echo-area-message ()
  (if (daemonp)
      ""
    (substitute-command-keys
     "")))

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq create-lockfiles nil
      load-prefer-newer t)

(setq inhibit-compacting-font-caches t)

(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=20")
(set-fontset-font t 'han "黑体:pixelsize=20")

(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

(setq use-short-answers t)

(fset 'list-buffers 'ibuffer)

(setq y-or-n-p-use-read-key t
      read-char-choice-use-read-key t)


(setq initial-major-mode 'org-mode)
(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq process-adaptive-read-buffering nil
      read-process-output-max (* 10 1024 1024))
(setq-default
 fill-column 79
 indent-tabs-mode nil
 tab-width 4
 truncate-partial-width-windows nil
 sentence-end-double-space nil)

(setq ring-bell-function 'ignore)

(global-subword-mode 1)

(use-package all-the-icons)

#+END_SRC  

** language difference(macros! to solve)
#+begin_src emacs-lisp
(defmacro set-company-backends-for! (mode &rest backends)
  "Set `company-backends' for MODE with BACKENDS."
  `(add-hook (intern (format "%s-hook" ',mode))
             (lambda ()
               (company-mode +1)
               (setq-local company-backends ',backends))))

(defmacro shut-up! (func)
  "Silence FUNC."
  `(advice-add ,func :around
               (defun ,(intern (format "shut-up-%s" func)) (f &rest args)
                 (let ((inhibit-message t))
                   (ignore-errors (apply f args))))))

(defmacro lazy! (&rest body)
  "Delay the evaluation of BODY."
  `(lambda ()
     ,@body))



#+end_src

#+RESULTS:
: lazy!

* FEEL the magic elements
** find magic
*** general
#+BEGIN_SRC emacs-lisp
(use-package info-colors 
  :hook ('Info-selection-hook . 'info-colors-fontify-node))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	which-key-idle-secondary-delay 0
	which-key-sort-order 'which-key-prefix-then-key-order
	))

#+END_SRC

*** swiper counsel
;; (use-package swiper
;;   :ensure try
;;   :bind (("C-s"  . swiper))
;;   )
;; (use-package counsel
;;   :bind
;;   ("M-x"  . counsel-M-x)
;;   ("C-x C-f"  . counsel-find-file)
;;   :config
;;   (progn
;;     (ivy-mode 1)
;;     (setq ivy-use-virtual-buffers t)
;;     (setq ivy-display-style 'fancy))      
;;   )
;; (use-package ivy-rich
;;   :init (ivy-rich-mode 1))

*** consult vertico orderless
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(use-package vertico
  :hook (after-init . vertico-mode)
  :config
  (setq vertico-count 8)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec))

(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))

(global-unset-key (kbd "C-s"))
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ;;         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-'" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; C-s bindings (search-map)
         ("C-s d" . consult-find)
         ("C-s D" . consult-locate)
         ("C-s g" . consult-grep)
         ("C-s G" . consult-git-grep)
         ("C-s r" . consult-ripgrep)
         ("C-s l" . consult-line)
         ("C-s L" . consult-line-multi)
         ("C-s m" . consult-multi-occur)
         ("C-s k" . consult-keep-lines)
         ("C-s u" . consult-focus-lines))

  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :custom
  (consult-fontify-preserve nil)
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.15)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
  (consult-project-root-function #'projectile-project-root)
  )

(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-set-up-hook #'cursor-intangible-mode)
#+end_src

#+RESULTS:
| cursor-intangible-mode |

** outfit of magic
#+begin_src emacs-lisp
(toggle-frame-maximized)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(set-frame-parameter nil 'undecorated t)  

;; (use-package tangotango-theme)
;; (enable-theme 'tangotango)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/lazycat-theme"))
(require 'lazycat-theme)
(lazycat-theme-load-dark)
(setq lazycat-dark-brighter-modeline t
      lazycat-dark-brighter-comments t
      lazycat-dark-comment-bg t
      lazycat-dark-padded-modeline t)

;;can modeline change its color overtime if it doesnot have any other functionalies?
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/awesome-tray"))
(require 'awesome-tray)
(setq awesome-tray-active-modules
      '("location" "mode-name" "buffer-name" "parent-dir"
        "circe" "buffer-read-only"
	    "date" 
	    ))
(awesome-tray-mode 1)

#+END_SRC

** window
#+begin_src emacs-lisp
;; Customize popwin behavior
(use-package shackle                    ;*customize* not working?
  :ensure t
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'below)
  (shackle-rules '((magit-status-mode    :select t)
                   (magit-log-mode       :select t)
                   ("*quickrun*"         :select t)
                   (profiler-report-mode :select t)
                   (xwidget-webkit-mode  :select t :same t)
                   (apropos-mode         :select t :align right :size 0.2)
                   (help-mode            :select t :align right :size 0.2)
                   (helpful-mode         :select t :align right :size 0.2)
                   (comint-mode          :select t :align right :size 0.2)
                   (grep-mode            :select t :align right)
                   (rg-mode              :select t :align right)
                   (compilation-mode     :select t :align right :size 0.2)
                   ("*devdocs*"          :select t :align right :popup t :size 0.8)
                   ("*Flycheck errors*"         :select t   :align bellow :size 10)
                   ("*Backtrace*"               :select t   :align bellow :size 15)
                   ("*Shell Command Output*"    :select nil :align bellow :size 0.4)
                   ("*Async Shell Command*"     :select nil :align bellow :size 0.4)
                   ("*Org-Babel Error Output*"  :select nil :align bellow :size 0.3)
                   ("*package update results*"  :select nil :align bellow :size 10)
                   ("*Process List*"            :select t   :align bellow :size 0.3)
                   ("*Occur*"                   :select t   :align bellow)
                   ("\\*eldoc\\( for \\)?.*\\*" :select nil :align bellow :size 15 :regexp t))))

;; All `temp-buffer's, e.g. *Completions*, will never mess up window layout.
(use-package help
  :ensure nil
  :hook (after-init . temp-buffer-resize-mode)
  :custom
  (help-window-select t))

#+end_src

#+RESULTS:
| projectile-mode | show-paren-mode | temp-buffer-resize-mode | shackle-mode | vertico-mode | recentf-mode | save-place-mode | global-auto-revert-mode | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version |

** mark
*** delsel
#+begin_src emacs-lisp
;; Delete selection when we type or paste.
(use-package delsel
  :config
  (delete-selection-mode))
#+end_src
*** visible mark
#+begin_src emacs-lisp
(defface visible-mark-face1
  '((((type tty) (class mono)))
    (t (:background "gray")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face2
  '((((type tty) (class mono)))
    (t (:background "gray60")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)

(use-package visible-mark)
(global-visible-mark-mode 1)
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1
			               visible-mark-face2
			               ))
#+end_src

** line
#+BEGIN_SRC emacs-lisp
(line-number-mode nil)
;; (use-package linum-relative
;;   :custom
;;   (linum-relative-current-symbol "") 
;;   (linum-relative-global-mode t))
(setq  line-move-ignore-invisible t
       next-line-add-newlines t)
(set-default 'truncate-lines t)

(defun open-newline-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun open-newline-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'open-newline-below)
(global-set-key "\M-o" 'open-newline-above)
#+END_SRC

** rainbow delimiters(parenthesis)
((t
  (:weight ultra-bold :foreground "#ff6c6b" :background "#1B2229")))
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t))
;; don't you think it's a little to shine?
(use-package rainbow-delimiters 
  :config
  ;; 设置每一级括号的颜色
  (set-face-foreground 'rainbow-delimiters-depth-1-face "gold") 
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1") 
  (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green") 
  (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-2-face "t")
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
;;   (text-mode . rainbow-delimiters-mode)
   ))
;; (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink") 
;; (set-face-foreground 'rainbow-delimiters-depth-5-face "DarkOrange2")
;; (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise") 
;; (set-face-foreground 'rainbow-delimiters-depth-7-face "medium orchid") 
;; (set-face-foreground 'rainbow-delimiters-depth-8-face "chartreuse3") 
;; (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan") 


#+end_src

#+RESULTS:
| rainbow-delimiters-mode | text-mode-hook-identify |

** rainbow cursor
#+begin_src emacs-lisp
;; we don't want the cursor vanish
(blink-cursor-mode -1)
(setq rainbow-cursor-color-list '("#FF0000";red
		                          "#FF5000"
		                          "#FF9F00";orange
		                          "#FFFF00";yellow
		                          "#BFFF00"
		                          "#00FF00";green
		                          "#00FFFF";
		                          "#0088FF"
		                          "#0000FF";blue
		                          "#5F00FF"
		                          "#8B00FF";purple
		                          "#CF00FF"
		                          "#FF0088"
		                          ))
(setq rainbow-cursor-color-pointer 1)
(defun cursor-color-change ()
  "Take a color from `rainbow-color-list' by the pointer.  
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (nth rainbow-cursor-color-pointer
		                 rainbow-cursor-color-list)))

(run-with-timer ()
		        (/ .5 (length rainbow-cursor-color-list))
		        'cursor-color-change)
    #+end_src    

** scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-step 2
      scroll-margin 2
      hscroll-step 2
      hscroll-margin 2
      scroll-conservatively 101)
;;      scroll-preserve-screen-position 'always
      
#+END_SRC

** keybinding (navigation, etc.)
#+begin_src emacs-lisp
;;learn from lazy-cat's thing-edit and move-text
(global-set-key "\M-i" 'other-window)
(global-set-key "\C-r" 'query-replace)

(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; 这样的键盘布局对于人类来说为时尚早……
;; (defun tl/exchange-keys ()
;;   "exchange some keys' behaviour, like '1' will ouput '!', '!' output '1'"
;;   (interactive)
;;   (global-set-key (kbd "1") (lambda () (interactive) (insert "!")))
;;   (global-set-key (kbd "4") (lambda () (interactive) (insert "$")))
;;   (global-set-key (kbd "!") (lambda () (interactive) (insert "1")))
;;   (global-set-key (kbd "$") (lambda () (interactive) (insert "4")))
;;   )
;;     (add-hook 'after-init-hook 'tl/exchange-keys)
#+end_src

** keyboard input method
*** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
(if (posframe-workable-p)
    (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup))
(setq pyim-page-length 9)
(setq pyim-indicator-list (list #'pyim-indicator-with-posframe))

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-greatdict")  
;; (require 'pyim-greatdict)
;; (pyim-greatdict-enable)
#+end_src

#+RESULTS:
: pyim

** server
#+begin_src emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+end_src

* RECALL the structure of our magic array
** ORG
*** org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  (org-directory "~/org/")
  (org-default-notes-file (expand-file-name "notes.org" org-directory))
  ;; prettify
  (org-startup-indented t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  (org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+")))
  ;; image
  (org-image-actual-width nil)
  (org-display-remote-inline-images 'cache)
  ;; more user-friendly
  (org-clone-delete-id t)
  (org-use-sub-superscripts '{})
  (org-yank-adjusted-subtrees t)
  (org-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content t)
  ;; call C-c C-o explicitly
  (org-return-follows-link nil)
  ;; todo
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELLED(c@/!)")))

  (org-todo-keyword-faces '(("TODO"       :foreground "#feb24c" :weight bold)
                            ("DONE"       :foreground "#50a14f" :weight bold)
                            ("CANCELLED"  :foreground "#ff6480" :weight bold)))
  (org-use-fast-todo-selection 'auto)   ;expert
  (org-enforce-todo-dependencies nil)
  (org-enforce-todo-checkbox-dependencies t)
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                           ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                           ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (org-closed-keep-when-no-todo t)      ;wt
  ;; log
  (org-log-repeat 'time)
  (org-log-into-drawer t)
  ;; tags, e.g. #+TAGS: keyword in your file
  (org-use-tag-inheritance nil)
  ;; (org-use-fast-tag-selection t)        ;wt
  ;; (org-fast-tag-selection-single-key t)
  ;; archive
  ;; (org-archive-location "%s_archive::datetree/")
  ;; id
  ;; (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  ;; abbreviation for url
  (org-link-abbrev-alist '(("GitHub" . "https://github.com/") ;wt
                           ("GitLab" . "https://gitlab.com/")
                           ("Google" . "https://google.com/search?q=")
                           ("RFCs"   . "https://tools.ietf.org/html/")
                           ("LWN"    . "https://lwn.net/Articles/")
                           ("WG21"   . "https://wg21.link/"))))


#+end_src

#+RESULTS:
| #[0 \305\306	>\203 \307 |

*** outfit
**** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭")
        org-ellipsis " ▼"))

  #+END_SRC

**** table font
(let ((emacs-font-size 14)
  (emacs-font-name "WenQuanYi Micro Hei Mono"))
  (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)))
  (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))

(with-eval-after-load 'org
  (defun org-buffer-face-mode-variable ()
    (interactive)
    (make-face 'width-font-face)
    (set-face-attribute 'width-font-face nil :font "等距更纱黑体 SC 15")
    (setq buffer-face-mode-face 'width-font-face)
    (buffer-face-mode))

(add-hook 'org-mode-hook 'org-buffer-face-mode-variable))
**** cycle
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab t
  org-cycle-global-at-bob t
  )

(require 'org-tempo)

#+END_SRC

*** agenda
#+begin_src emacs-lisp
(setq org-agenda-include-diary nil)
  ;; (org-agenda-files (list (expand-file-name "tasks.org" org-directory)))
  ;; (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  ;; (org-agenda-insert-diary-extract-time t)
  ;; (org-agenda-inhibit-startup t)
  ;; (org-agenda-time-leading-zero t)
  ;; (org-agenda-remove-tags t)
  ;; (org-agenda-columns-add-appointments-to-effort-sum t)
  ;; (org-agenda-restore-windows-after-quit t)
  ;; (org-agenda-window-setup 'current-window)
  
#+end_src

#+RESULTS:

*** export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)

;; (use-package ox-reveal
;;   :commands (org-reveal)
;;   :init
;;   (add-hook 'after-init-hook #'org-reveal)
;;   :config
;;   (setq org-reveal-root "~/.reveal.js"
;;    org-reveal-theme "moon"
;;    org-reveal-plugins '(classList markdown zoom notes)
;;    ))

(setq org-export-headline-levels 1
      org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-html-checkbox-type 'html
      org-html-doctype "html5"
      org-html-html5-fancy t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
 #+END_SRC

 #+RESULTS:
 | ( color) | ( listings) | \usepackage{ctex} |
*** org-src
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map "\C-c\C-c" 'org-edit-src-exit)
(setq org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (C          . t)
                               (python     . t)
                               (shell      . t)
                               (latex      . t)
                               (dot        . t)
                               ))
 #+END_SRC

 #+RESULTS:

*** mouse
#+begin_src emacs-lisp
(setq org-mouse-features '(activate-checkboxes))
#+end_src
** structured text(md, rst)
#+begin_src emacs-lisp
;; Pixel alignment for org/markdown tables
(use-package valign
  :ensure t
  :hook ((markdown-mode org-mode) . valign-mode))

;; The markdown mode is awesome! unbeatable
(use-package markdown-mode
  :ensure t
  :init
  (advice-add #'markdown--command-map-prompt :override #'ignore)
  (advice-add #'markdown--style-map-prompt   :override #'ignore)
  :mode ("README\\(?:\\.md\\)?\\'" . gfm-mode)
  :hook (markdown-mode . visual-line-mode)
  :bind (:map markdown-mode-style-map
         ("r" . markdown-insert-ruby-tag)
         ("d" . markdown-insert-details))
  :config
  (defun markdown-insert-ruby-tag (text ruby)
    "Insert ruby tag with `TEXT' and `RUBY' quickly."
    (interactive "sText: \nsRuby: \n")
    (insert (format "<ruby>%s<rp>(</rp><rt>%s</rt><rp>)</rp></ruby>" text ruby)))

  (defun markdown-insert-details (title)
    "Insert details tag (collapsible) quickly."
    (interactive "sTitle: ")
    (insert (format "<details><summary>%s</summary>\n\n</details>" title)))
  :custom
  (markdown-header-scaling t)
  (markdown-enable-wiki-links t)
  (markdown-italic-underscore t)
  (markdown-asymmetric-header t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-fontify-code-blocks-natively t))

;; ReStructuredText
(use-package rst
  :ensure nil
  :hook ((rst-mode . visual-line-mode)
         (rst-adjust . rst-toc-update)))

#+end_src

#+RESULTS:
| rst-toc-update |
** latex
#+begin_src emacs-lisp

#+end_src
** dired
#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t
      dired-auto-revert-buffer #'dired-directory-changed-p
      dired-hide-details-hide-symlink-targets nil)
(setq dired-listing-switches "-AFhlv")  ;wt

;; Make dired colorful
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))


#+end_src

#+RESULTS:
| diredfl-mode | diff-hl-dired-mode-unless-remote |

** project and file's magic
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (dolist (dir '("bazel-bin"            ;what's this?
                 "bazel-out"
                 "bazel-testlogs"))
    (add-to-list 'projectile-globally-ignored-directories dir))
  :custom
  (projectile-use-git-grep t)
  (projectile-indexing-method 'alien)   ;default is alien
  )


(use-package ripgrep)

#+END_SRC

** cc mode
#+begin_src emacs-lisp
;; (use-package cc-mode
;;   :defines lsp-clients-clangd-executable lsp-clients-clangd-args
;;   :hook (c-mode-common c-toggle-auto-hungry-state)
;;   :config
;;   (defconst ccls-args nil)
;;   (defconst clangd-args '("-j=2"
;;                           "--malloc-trim"
;;                           "--background-index"
;;                           "--clang-tidy"
;;                           "--completion-style=bundled"
;;                           "--pch-storage=memory"
;;                           "--header-insertion=iwyu"
;;                           "--header-insertion-decorators"))
;;   (with-eval-after-load 'lsp-mode
;;     ;; Prefer `clangd' over `ccls'
;;     (cond ((executable-find "clangd") (setq lsp-clients-clangd-executable "clangd"
;;                                             lsp-clients-clangd-args clangd-args))
;;           ((executable-find "ccls") (setq lsp-clients-clangd-executable "ccls"
;;                                           lsp-clients-clangd-args ccls-args))))
;;   )

(add-hook 'c-mode-common-hook 'c-toggle-auto-hungry-state)
(remove-hook 'c-mode-common-hook 'cc-mode)

;; A compiler output viewer
(use-package rmsbolt
  :commands rmsbolt-compile
  :custom
  (rmsbolt-asm-format nil)
  (rmsbolt-default-directory "/tmp"))

;; Parser generator
(use-package bison-mode)

;; cmake, the de factor build system for C++
(use-package cmake-mode
  :config
  (set-company-backends-for! cmake-mode company-cmake))

;; Extra font locks for cmake
(use-package cmake-font-lock
  :hook (cmake-mode cmake-font-lock-activate))


#+end_src

#+RESULTS:
| cmake-font-lock |

** lisp
#+begin_src emacs-lisp
;; elisp
(defconst eval-as-comment-prefix ";;=> ")
;; Imitate scala-mode
;; from https://github.com/dakra/dmacs
(defun eval-to-comment (&optional arg)
  (interactive "P")
  (let ((start (point)))
    (eval-print-last-sexp arg)
    (save-excursion
      (goto-char start)
      (save-match-data
        (re-search-forward "[[:space:]\n]+" nil t)
        (insert eval-as-comment-prefix)))))

(define-key emacs-lisp-mode-map "\C-c\C-b" 'eval-buffer)
(define-key emacs-lisp-mode-map "\C-c\C-c" 'eval-to-comment)
(define-key lisp-interaction-mode-map "\C-c\C-c" 'eval-to-comment)


(use-package ielm
  :ensure nil
  :hook (ielm-mode . company-mode))


#+end_src

#+RESULTS:
| company-mode |

** python
#+begin_src emacs-lisp
(use-package python
  :custom
  (python-indent-guess-indent-offset-verbose nil))

;; python -m venv ENV_DIR
(use-package pyvenv
  :commands pyvenv-deactivate pyvenv-deactivate)


#+end_src

#+RESULTS:

** haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :hook ((haskell-mode . haskell-indentation-mode)
         (haskell-mode . haskell-doc-mode))
  :custom
  (haskell-completing-read-function 'completing-read)
  (haskell-process-check-cabal-config-on-load nil)
  (haskell-process-suggest-add-package nil)
  (haskell-process-suggest-hoogle-imports nil)
  (haskell-process-suggest-language-pragmas nil)
  (haskell-process-suggest-overloaded-strings nil)
  (haskell-process-suggest-restart nil))


#+end_src

#+RESULTS:
| haskell-doc-mode | haskell-indentation-mode |

** rust
#+begin_src emacs-lisp
(use-package rust-mode
  :defines lsp-rust-server
  :config
  ;; Prefer `rust-analyzer' over `rls'
  (with-eval-after-load 'lsp-mode
    (when (executable-find "rust-analyzer")
      (setq lsp-rust-server 'rust-analyzer)))
  :custom
  (rust-format-on-save (executable-find "rustfmt")))

;; Cargo integration
(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
#+end_src

#+RESULTS:
| cargo-minor-mode | rust-maybe-initialize-buffer-project |

** other modes
#+begin_src emacs-lisp
(use-package fish-mode)
(use-package lox-mode)
(use-package php-mode)
(use-package crontab-mode)
(use-package graphviz-dot-mode)
(use-package json-mode)
(use-package csharp-mode)
;;  (use-package pdf-tools)

;;  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
;;  (require 'css-sort-buffer)

#+end_src

#+RESULTS:

** www
#+begin_src emacs-lisp
(use-package eww
  :config
  (defun eww-open-this-file ()
    (interactive)
    (if (buffer-file-name)
        (eww-open-file (buffer-file-name))
      (call-interactively 'eww))))

#+end_src

#+RESULTS:
: t

** games
#+begin_src emacs-lisp
(use-package figlet
  :defer t)
(use-package speed-type
  :defer t)
(use-package zone-nyan
  :defer t)
(use-package autotetris-mode
  :defer t)
(use-package flames-of-freedom
  :defer t)

#+end_src

#+RESULTS:

* casting magic
** our loyal assistent carrying all our books
#+begin_src emacs-lisp
(use-package xref
  :init
  ;; On Emacs 28, `xref-search-program' can be set to `ripgrep'.
  ;; `project-find-regexp' benefits from that.
  (setq xref-search-program 'ripgrep)
  (setq xref-show-xrefs-function #'xref-show-definitions-completing-read)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  :hook ((xref-after-return xref-after-jump) . recenter))

(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate t)
  :bind (("M-g j" . dumb-jump-go)
         ("M-g J" . dumb-jump-go-other-window))
  :custom
  (dumb-jump-quiet t)
  (dumb-jump-aggressive t)
  (dumb-jump-selector 'completing-read))

(use-package citre
  :init
  (require 'citre-config)
  (global-set-key (kbd "M-.") 'citre-ace-peek)
  (global-set-key (kbd "M-,") 'citre-peek-restore)
  :bind (("C-c d c" . citre-update-this-tags-file))
  :custom
  (citre-prompt-language-for-ctags-command t)
  (citre-ctags-program (executable-find "ctags"))
  (citre-readtags-program (executable-find "readtags"))
  :config
  (setq
   citre-project-root-function #'projectile-project-root
   citre-default-create-tags-file-location 'global-cache
   citre-use-project-root-when-creating-tags t
   citre-prompt-language-for-ctags-command t
   )
  
  (defun citre-jump+ ()
    (interactive)
    (condition-case _
        (citre-jump)
      (error (let* ((xref-prompt-for-identifier nil))
               (call-interactively #'xref-find-definitions)))))
  )

;; Browse devdoc.io
(use-package devdocs
  :ensure t
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex)))))

(use-package marginalia
  :config
  (marginalia-mode))

;; persist history over emacs restarts.
(use-package savehist
  :init (savehist-mode))

;; Insert SPDX license header
;; (use-package spdx
;;   :hook (prog-mode . spdx-tempo-setup)
;;   :custom
;;   (spdx-ignore-deprecated t))
;; tldr man info

(use-package tldr)
  
;; I would use grep for searching TODO

;; I will not enable whitespace-mode. I only need a tool that automaticly remove spaces, but keep the spaces around my cursor for about five lines to not disturb typing.

;; a tool for hiding code blocks is `hideshow'
#+end_src

#+RESULTS:
| flycheck-mode | spdx-tempo-setup | rainbow-delimiters-mode |

** choosing your lyrics
*** Company
#+begin_src emacs-lisp
(use-package company
  :hook (prog-mode . company-mode)
  :bind (:map company-mode-map
              ([remap completion-at-point] . company-complete)
              :map company-active-map
              ([tab]     . company-complete-common-or-cycle)
              ([backtab] . company-select-previous-or-abort)
              ("C-n" . nil)
              ("C-p" . nil)
              ) ;maybe unbind C-n?
  :config
  (define-advice company-capf--candidates (:around (func &rest args))
    "Try default completion styles."
    (let ((completion-styles '(basic partial-completion)))
      (apply func args)))
  :custom
  (company-idle-delay 0.2)
  ;; Easy navigation to candidates with M-<n>
  (company-show-quick-access t)
  (company-require-match nil)
  (company-minimum-prefix-length 1)
  (company-tooltip-width-grow-only t)
  (company-tooltip-align-annotations t)
  ;; complete `abbrev' only in current buffer and make dabbrev case-sensitive
  (company-dabbrev-other-buffers nil)
  (company-dabbrev-ignore-case nil)
  (company-dabbrev-downcase nil)
  ;; make dabbrev-code case-sensitive
  (company-dabbrev-code-ignore-case nil)
  (company-dabbrev-code-everywhere t)
  ;; call `tempo-expand-if-complete' after completion
  (company-tempo-expand t)
  ;; Ignore uninteresting files. Items end with a slash are recognized as
  ;; directories.
  (company-files-exclusions '(".git/" ".DS_Store"))
  ;; No icons
  (company-format-margin-function nil)
  (company-backends '((company-capf :with company-tempo)
                      company-files
                      (company-dabbrev-code company-keywords)
                      company-dabbrev
                      ;; HACK: prevent `lsp-mode' to add `company-capf' back.
                      company-capf)))

;; (use-package company-tabnine
;;   :config
;;   (defun company//sort-by-tabnine (candidates)
;;     (if (or (functionp company-backend)
;; 	        (not (and (listp company-backend) (memq 'company-tabnine company-backend))))
;;         candidates
;;       (let ((candidates-table (make-hash-table :test #'equal))
;; 	        candidates-1
;; 	        candidates-2)
;;         (dolist (candidate candidates)
;; 	      (if (eq (get-text-property 0 'company-backend candidate)
;; 		          'company-tabnine)
;; 	          (unless (gethash candidate candidates-table)
;; 	            (push candidate candidates-2))
;; 	        (push candidate candidates-1)
;; 	        (puthash candidate t candidates-table)))
;;         (setq candidates-1 (nreverse candidates-1))
;;         (setq candidates-2 (nreverse candidates-2))
;;         (nconc (seq-take candidates-1 1)	; number of items tabnine shows
;; 	           (seq-take candidates-2 1)
;; 	           (seq-drop candidates-1 1)
;; 	           (seq-drop candidates-2 1)))))

;;   (add-to-list 'company-transformers 'company//sort-by-tabnine t)
;;   ;; `:separate`  使得不同 backend 分开排序
;;   (add-to-list 'company-backends '(company-capf :with company-tabnine :separate))

;;   ;; The free version of TabNine is good enough,
;;   ;; and below code is recommended that TabNine not always
;;   ;; prompt me to purchase a paid version in a large project.
;;   (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
;;     (let ((company-message-func (ad-get-arg 0)))
;;       (when (and company-message-func
;; 	             (stringp (funcall company-message-func)))
;;         (unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
;; 	      ad-do-it))))
;;   )







#+end_src

#+RESULTS:

*** corfu
(use-package corfu
  ;; TAB-and-Go customizations
  :custom
  (corfu-auto t)
  (corfu-quit-at-boundary t)
  (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect-first nil) ;; Disable candidate preselection
  (corfu-auto-prefix 1)
  (corfu-auto-delay 0.01)
  ;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (corfu-global-mode))

;; Use dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))

(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point (list (current-local-map)))
    ;; (setq-local corfu-auto nil) Enable/disable auto completion
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

*** backends
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-sgml)
  (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'cape-line)
)

** composing our chanting
*** lsp
#+begin_src emacs-lisp
;; lsp-mode
(use-package lsp-mode
  :ensure t
  :hook (prog-mode . lsp-deferred)
  :custom
  (lsp-keymap-prefix "C-c l")
  (lsp-enable-links nil)                 ;; no clickable links
  (lsp-enable-folding nil)               ;; use `hideshow' instead
  (lsp-enable-file-watchers nil)         ;; performance matters
  (lsp-enable-text-document-color nil)   ;; as above
  (lsp-enable-on-type-formatting nil)    ;; as above
  (lsp-enable-indentation nil)           ;; don't change my code without my permission
  (lsp-headerline-breadcrumb-enable nil) ;; keep headline clean
  (lsp-modeline-code-actions-enable nil) ;; keep modeline clean
  (lsp-modeline-diagnostics-enable nil)  ;; as above
  (lsp-log-io nil)                       ;; debug only
  (lsp-auto-guess-root t)                ;; auto guess root
  (lsp-keep-workspace-alive nil)         ;; auto kill lsp server
  (lsp-eldoc-enable-hover nil))          ;; disable eldoc hover

(use-package yasnippet      
  :config (yas-global-mode))
#+end_src

#+RESULTS:
: t

*** ispell
#+begin_src emacs-lisp
;; dictionary needed?
;; (use-package ispell
;;   :config
;;   ;; no spell checking for org special blocks
;;   (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
;;   (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
;;   (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
;;   :custom
;;   (ispell-really-hunspell t)
;;   (ispell-program-name "hunspell")
;;   (ispell-dictionary "en_US")
;;   (ispell-following-word t)
;;   (ispell-personal-dictionary (locate-user-emacs-file "hunspell_dict.txt")))

;; Spell check on-the-fly
;; (use-package flyspell
;;   :custom
;;   ;; Use M-C-i instead if M-TAB is shadowed by your window manager
;;   (flyspell-use-meta-tab t)
;;   (flyspell-issue-welcome-flag nil)
;;   (flyspell-issue-message-flag nil))


#+end_src

#+RESULTS:
*** documentation
#+begin_src emacs-lisp
(use-package separedit
  :bind (:map prog-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'markdown-mode)
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-continue-fill-column t)
  (separedit-buffer-creation-hook #'auto-fill-mode))


#+end_src

#+RESULTS:
: separedit
*** pastebin service
#+begin_src emacs-lisp
(use-package webpaste
  :ensure t
  :commands webpaste-paste-buffer-or-region
  :custom
  (webpaste-open-in-browser t)
  (webpaste-paste-confirmation t)
  (webpaste-add-to-killring nil)
  (webpaste-provider-priority '("paste.mozilla.org" "dpaste.org" "ix.io")))

#+end_src
*** language difference(web search &web translate)
#+begin_src emacs-lisp
;; Web search
(use-package webjump
  :ensure nil
  ;; C-c / will be shadowed by `org-sparse-tree' in org-mode
  :bind ("C-c C-/" . webjump)
  :custom
  (webjump-sites '(;; Internet search engines.
                   ("Google" .
                    [simple-query "www.google.com"
                                  "www.google.com/search?q=" ""])
                   ("Wikipedia" .
                    [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""])
                   ("Ludwig Guru" .
                    [simple-query "ludwig.guru" "ludwig.guru/s/" ""])
                   ("Stack Overflow" .
                    [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
                   ("Man Search" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" ""])
                   ("Man Go" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" "&go=Go"])

                   ;; Language specific engines.
                   ("x86 Instructions Reference" .
                    [simple-query "www.felixcloutier.com"
                                  "www.felixcloutier.com/x86/" ""]))))

;; Translator for Emacs
;; M-x fanyi-dwim{,2}, that's all.
(use-package fanyi
  :ensure t
  :commands fanyi-dwim fanyi-dwim2)

(use-package youdao-dictionary
  :bind (("M-s" . youdao-dictionary-search-at-point+)))


#+end_src

** step by step we strengthen our spell
*** magit
#+begin_src emacs-lisp
(use-package magit
;;  :hook (git-commit-setup . git-commit-turn-on-flyspell)
  :custom
  (magit-diff-refine-hunk t)            ;what's this?
  (magit-diff-paint-whitespace nil)
  )

(use-package vc
  :custom
  (vc-follow-symlinks t)
  (vc-allow-async-revert t)
  (vc-handled-backends '(Git)))

;; useless and disturbing
;; Highlight uncommitted changes using VC
;; (use-package diff-hl
;;   :ensure t
;;   :hook ((after-init         . global-diff-hl-mode)
;;          (dired-mode         . diff-hl-dired-mode-unless-remote)
;;          (magit-pre-refresh  . diff-hl-magit-pre-refresh)
;;          (magit-post-refresh . diff-hl-magit-post-refresh))
;;   :config
;;   ;; When Emacs runs in terminal, show the indicators in margin instead.
;;   (unless (display-graphic-p)
;;     (diff-hl-margin-mode)))

;; Visual diff interface
(use-package ediff                ;what's this?
  ;; Restore window config after quitting ediff
  :hook ((ediff-before-setup . ediff-save-window-conf)
         (ediff-quit         . ediff-restore-window-conf))
  :config
  (defvar local-ediff-saved-window-conf nil)

  (defun ediff-save-window-conf ()
    (setq local-ediff-saved-window-conf (current-window-configuration)))

  (defun ediff-restore-window-conf ()
    (when (window-configuration-p local-ediff-saved-window-conf)
      (set-window-configuration local-ediff-saved-window-conf)))
  :custom
  (ediff-highlight-all-diffs t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally))

;; will this be influenced by ping?
(use-package browse-at-remote
  :bind (:map vc-prefix-map
         ("b" . bar-browse)         ;; was `vc-switch-backend'
         ("c" . bar-to-clipboard))
  :custom
  (browse-at-remote-add-line-number-if-no-region-selected nil))

;; Setup gitignore mode
(use-package conf-mode
  :ensure nil
  :mode (("\\.gitignore\\'"     . conf-unix-mode)
         ("\\.gitconfig\\'"     . conf-unix-mode)
         ("\\.gitattributes\\'" . conf-unix-mode)))


#+end_src

** see the power of spell
*** compile
#+begin_src emacs-lisp
;; Compilation Mode
(use-package compile
  :ensure nil
  :hook (compilation-filter . colorize-compilation-buffer)
  :config
  (defun colorize-compilation-buffer ()
    "ANSI coloring in compilation buffers."
    (with-silent-modifications
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  :custom
  (compilation-always-kill t)
  (compilation-scroll-output t)
  ;; Save all buffers on M-x `compile'
  (compilation-ask-about-save nil))


#+end_src

*** quickrun
#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  )

#+end_src

*** flycheck
#+BEGIN_SRC emacs-lisp
;; flycheck好烦阿，能不能只显示未使用的变量和未定义的函数？
(use-package flycheck
  :hook (prog-mode . flycheck-mode)
  :custom
  (flycheck-temp-prefix ".flycheck")
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-indication-mode 'left-fringe)
  (flycheck-idle-change-delay 1)
  )
  #+END_SRC

