
* PREPARE the truck to magic world
** BENCHMARK
#+begin_src emacs-lisp
;; in GNU Emacs 29.0.50, a function used by benchmark turn it's required arguments from 2 to 3, thus need manually change the package source.
(use-package benchmark-init)
(benchmark-init/activate)
#+end_src
** native compilation
#+begin_src emacs-lisp
(setq comp-deferred-compilation t
      package-native-compile t
)

#+end_src
** Try
#+BEGIN_SRC emacs-lisp
(use-package try)
(use-package posframe)
(use-package all-the-icons)
 #+END_SRC

 #+RESULTS:

** file on change
#+begin_src emacs-lisp
 (setq make-backup-files nil)

;; Update buffer whenever file changes
;; Also revert dired buffer.
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-avoid-polling t)
  (auto-revert-verbose nil)
  (auto-revert-remote-files t)
  (auto-revert-check-vc-info t)
  (global-auto-revert-non-file-buffers t))

;; auto save when idle
;; (setq auto-save-default nil)
;; (setq auto-save-idle 1)
;; (defun auto-save-buffers ()
;;   (interactive)
;;   (let ((auto-save-buffer-list))
;;     (save-excursion
;;       (dolist (buf (buffer-list))
;; 	(set-buffer buf)
;; 	(if (and (buffer-file-name) (buffer-modified-p))
;; 	    (progn
;; 	      (push (buffer-name) auto-save-buffer-list)
;; 	      (with-temp-message "" (basic-save-buffer))
;; 	      ))))))

;; (defun auto-save-enable ()
;;   (interactive)
;;   (run-with-idle-timer auto-save-idle t #'auto-save-buffers))

;; (auto-save-enable)


(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save/") ; add auto-save to your load-path
(require 'auto-save)
(auto-save-enable)

(setq auto-save-silent t)   ; quietly save
(setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving

;;; custom predicates if you don't want auto save.
;;; disable auto save mode when current filetype is an gpg file.
;; (setq auto-save-disable-predicates
;;       '((lambda ()
;;       (string-suffix-p
;;       "gpg"
;;       (file-name-extension (buffer-name)) t))))
#+end_src

#+RESULTS:
: t

** connection between session
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)

(defun restart-emacs-reopen-current-file ()
  "restart emacs then reopen the file being visited when casting this command.
if the buffer isn't a file, simply restart emacs."
  (interactive)
  (if (buffer-file-name)
      (restart-emacs (split-string (buffer-file-name)))
    (restart-emacs)))

;; Back to the previous position
(use-package saveplace
  :hook (after-init . save-place-mode))

(use-package recentf
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  (recentf-exclude '( ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))

#+END_SRC

** misc
#+begin_src emacs-lisp
(setq garbage-collection-messages t
      large-file-warning-threshold nil
      confirm-kill-processes nil
      shift-select-mode nil
      shell-command-prompt-show-cwd 1)

(setq read-process-output-max (* 3 1024 1024))
(setq initial-scratch-message nil
      initial-buffer-choice nil)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-buffer-menu t)
(defun startup-echo-area-message ()
  (if (daemonp)
      ""
    (substitute-command-keys
     "")))

(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

(setq create-lockfiles nil
      load-prefer-newer t)

(setq inhibit-compacting-font-caches t)

(setq word-wrap-by-category t)

(setq initial-scratch-message "")
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)


;;(setq initial-buffer-choice "~/org/gtd.org")

(set-face-attribute 'default nil :font "Source Code Pro:pixelsize=20")
;;(set-fontset-font t 'han ":pixelsize=20")
;; lazycat's config
;; (defun load-font-setup()
;;   (cond ((eq window-system 'pgtk)
;;          (set-face-attribute 'default nil :height 140 :family "WenQuanYi Micro Hei Mono"))
;;         (t
;;          (let ((emacs-font-size 14)
;;                (chinese-font-name  "TsangerJinKai03-6763")
;;                english-font-name)
;;            (cond
;;             ((featurep 'cocoa)
;;              (setq english-font-name "Monaco"))
;;             ((string-equal system-type "gnu/linux")
;;              (setq english-font-name "WenQuanYi Micro Hei Mono")))
;;            (when (display-grayscale-p)
;;              (set-frame-font (format "%s-%s" (eval english-font-name) (eval emacs-font-size)))
;;              (set-fontset-font (frame-parameter nil 'font) 'unicode (eval english-font-name))

;;              (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;                (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family (eval chinese-font-name))))
;;              )))))

;; (load-font-setup)


(setq display-raw-bytes-as-hex t
      redisplay-skip-fontification-on-input t)

(setq use-short-answers t)

(fset 'list-buffers 'ibuffer)

(setq y-or-n-p-use-read-key t
      read-char-choice-use-read-key t)


;;(setq initial-major-mode 'org-mode)
(put 'upcase-region    'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(setq process-adaptive-read-buffering nil
      read-process-output-max (* 10 1024 1024))
(setq use-dialog-box nil)
(setq-default
 fill-column 79
 indent-tabs-mode nil
 tab-width 4
 truncate-partial-width-windows nil
 sentence-end-double-space nil)

(setq ring-bell-function 'ignore)

(global-subword-mode 1)

(use-package all-the-icons)

#+END_SRC

#+RESULTS:

** language difference(macros! to solve)
#+begin_src emacs-lisp
;; (defmacro set-company-backends-for! (mode &rest backends)
;;   "Set `company-backends' for MODE with BACKENDS."
;;   `(add-hook (intern (format "%s-hook" ',mode))
;;              (lambda ()
;;                (company-mode +1)
;;                (setq-local company-backends ',backends))))

(defmacro shut-up! (func)
  "Silence FUNC."
  `(advice-add ,func :around
               (defun ,(intern (format "shut-up-%s" func)) (f &rest args)
                 (let ((inhibit-message t))
                   (ignore-errors (apply f args))))))

(defmacro lazy! (&rest body)
  "Delay the evaluation of BODY."
  `(lambda ()
     ,@body))



#+end_src

#+RESULTS:
: lazy!

* FEEL the magic elements
** find magic
*** general
#+BEGIN_SRC emacs-lisp
(use-package info-colors
  :hook ('Info-selection-hook . 'info-colors-fontify-node))

;; (use-package helpful
;;   :custom
;;   (counsel-describe-function-function #'helpful-callable)
;;   (counsel-describe-variable-function #'helpful-variable)
;;   :bind
;;   ([remap describe-function] . counsel-describe-function)
;;   ([remap describe-command] . helpful-command)
;;   ([remap describe-variable] . counsel-describe-variable)
;;   ([remap describe-key] . helpful-key))

(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.6
	which-key-idle-secondary-delay 0
	which-key-sort-order 'which-key-prefix-then-key-order
	))

#+END_SRC

*** swiper counsel
;; (use-package swiper
;;   :ensure try
;;   :bind (("C-s"  . swiper))
;;   )
;; (use-package counsel
;;   :bind
;;   ("M-x"  . counsel-M-x)
;;   ("C-x C-f"  . counsel-find-file)
;;   :config
;;   (progn
;;     (ivy-mode 1)
;;     (setq ivy-use-virtual-buffers t)
;;     (setq ivy-display-style 'fancy))
;;   )
;; (use-package ivy-rich
;;   :init (ivy-rich-mode 1))

*** consult
vertico orderless
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)

(use-package vertico
  :hook (after-init . vertico-mode)
  :config
  (setq vertico-count 8)
  (face-spec-set 'vertico-current
                 '((((background light))
                    :background "#d8d8d8" :extend t)
                   (t
                    :background "#454545" :extend t))
                 'face-defface-spec))

(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))

(global-unset-key (kbd "C-s"))


(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ;;         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-'" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; C-s bindings (search-map)
         ("C-s d" . consult-find)
         ("C-s D" . consult-locate)
         ("C-s g" . consult-grep)
         ("C-s G" . consult-git-grep)
         ("C-s r" . consult-ripgrep)
         ("C-s l" . consult-line)
         ("C-s L" . consult-line-multi)
         ("C-s m" . consult-multi-occur)
         ("C-s k" . consult-keep-lines)
         ("C-s u" . consult-focus-lines))

  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :custom
  (consult-fontify-preserve nil)
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.15)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
  (consult-project-root-function #'projectile-project-root)
  (defun consult-buffer ()
    (interactive)
    (consult--multi consult-buffer-sources
                    :require-match
                    (confirm-nonexistent-file-or-buffer)
                    :prompt "Switch to: "
                    :history 'consult--buffer-history
                    :sort nil))


  )

(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-set-up-hook #'cursor-intangible-mode)
#+end_src

#+RESULTS:
| cursor-intangible-mode |

** outfit of magic
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
;;(toggle-frame-maximized)
;;(set-frame-parameter nil 'undecorated t)

(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; (use-package tangotango-theme)
;; (enable-theme 'tangotango)
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/lazycat-theme"))
(require 'lazycat-theme)
(lazycat-theme-load-dark)
(setq lazycat-dark-brighter-modeline t
      lazycat-dark-brighter-comments t
      lazycat-dark-comment-bg t
      lazycat-dark-padded-modeline t)

;;can modeline change its color overtime if it doesnot have any other functionalies?
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/awesome-tray"))
(require 'awesome-tray)
(setq awesome-tray-active-modules
      '("location" "mode-name" "buffer-name" "parent-dir"
        "circe" "buffer-read-only"
	    "date"
	    ))
(awesome-tray-mode 1)

#+END_SRC

#+RESULTS:
: t

** window
#+begin_src emacs-lisp
(setq split-height-threshold nil)         ;don't split vertically

;; Customize popwin behavior
(use-package shackle                    ;*customize* not working?
  :ensure t
  :hook (after-init . shackle-mode)
  :custom
  (shackle-default-size 0.5)
  (shackle-default-alignment 'bellow)
  (shackle-rules '((magit-status-mode    :select t :align right)
                   (magit-log-mode       :select t :align right)
                   ("*quickrun*"         :select t)
                   (profiler-report-mode :select t)
                   (xwidget-webkit-mode  :select t :same t)
                   (apropos-mode         :select t :align right :size 0.2)
                   (help-mode            :select t :align right :size 0.2)
                   (helpful-mode         :select t :align right :size 0.2)
                   (comint-mode          :select t :align right :size 0.2)
                   (grep-mode            :select t :align right)
                   (rg-mode              :select t :align right)
                   (compilation-mode     :select t :align right :size 0.2)
                   ("*devdocs*"          :select t :align right :popup t :size 0.8)
                   ("*Flycheck errors*"         :select t   :align bellow :size 10)
                   ("*Backtrace*"               :select t   :align bellow :size 15)
                   ("*Shell Command Output*"    :select nil :align bellow :size 0.4)
                   ("*Async Shell Command*"     :select nil :align bellow :size 0.4)
                   ("*Org-Babel Error Output*"  :select nil :align bellow :size 0.3)
                   ("*package update results*"  :select nil :align bellow :size 10)
                   ("*Process List*"            :select t   :align bellow :size 0.3)
                   ("*Occur*"                   :select t   :align bellow)
                   ("\\*eldoc\\( for \\)?.*\\*" :select nil :align bellow :size 15 :regexp t))))

;; All `temp-buffer's, e.g. *Completions*, will never mess up window layout.
(use-package help
  :ensure nil
  :hook (after-init . temp-buffer-resize-mode)
  :custom
  (help-window-select t))

#+end_src

#+RESULTS:
| projectile-mode | show-paren-mode | temp-buffer-resize-mode | shackle-mode | vertico-mode | recentf-mode | save-place-mode | global-auto-revert-mode | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version |

** mark
*** delsel
#+begin_src emacs-lisp
;; Delete selection when we type or paste.
(use-package delsel
  :config
  (delete-selection-mode))
#+end_src
*** visible mark
#+begin_src emacs-lisp
(defface visible-mark-face1
  '((((type tty) (class mono)))
    (t (:background "gray")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)
(defface visible-mark-face2
  '((((type tty) (class mono)))
    (t (:background "gray60")))
  "Example face which can be customized and added to subsequent face lists."
  :group 'visible-mark)

(use-package visible-mark)
(global-visible-mark-mode 1)
(setq visible-mark-max 2)
(setq visible-mark-faces `(visible-mark-face1
			               visible-mark-face2
			               ))
#+end_src

** line
#+BEGIN_SRC emacs-lisp
(line-number-mode nil)
;; (use-package linum-relative
;;   :custom
;;   (linum-relative-current-symbol "")
;;   (linum-relative-global-mode t))
(setq  line-move-ignore-invisible t
       next-line-add-newlines t)
(set-default 'truncate-lines t)

(defun open-newline-below()
  (interactive)
  (end-of-line)
  (open-line 1)
  (call-interactively 'next-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(defun open-newline-above()
  (interactive)
  (beginning-of-line)
  (open-line 1)
  (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
      (indent-according-to-mode)
    (beginning-of-line)))

(global-set-key "\C-o" 'open-newline-below)
(global-set-key "\M-o" 'open-newline-above)
#+END_SRC

** rainbow delimiters(parenthesis)
((t
  (:weight ultra-bold :foreground "#ff6c6b" :background "#1B2229")))
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-highlight-openparen t))
;; don't you think it's a little to shine?
(use-package rainbow-delimiters
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "DarkOrange") ;lazycat
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DeepSkyBlue")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "DarkRed")
  ;; (set-face-foreground 'rainbow-delimiters-depth-1-face "gold")
  ;; (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
  ;; (set-face-foreground 'rainbow-delimiters-depth-3-face "lime green")
  ;; (set-face-bold 'rainbow-delimiters-depth-1-face "t")
  ;; (set-face-bold 'rainbow-delimiters-depth-2-face "t")
  :hook
  ((prog-mode . rainbow-delimiters-mode)
   (shell-mode . rainbow-delimiters-mode)
;;   (text-mode . rainbow-delimiters-mode)
   ))
;; (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink")
;; (set-face-foreground 'rainbow-delimiters-depth-5-face "DarkOrange2")
;; (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise")
;; (set-face-foreground 'rainbow-delimiters-depth-7-face "medium orchid")
;; (set-face-foreground 'rainbow-delimiters-depth-8-face "chartreuse3")
;; (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan")


#+end_src

#+RESULTS:
| rainbow-delimiters-mode | text-mode-hook-identify |

** rainbow cursor
#+begin_src emacs-lisp
;; we don't want the cursor vanish
(blink-cursor-mode -1)
(setq rainbow-cursor-color-list '("#FF0000";red
		                          "#FF5000"
		                          "#FF9F00";orange
		                          "#FFFF00";yellow
		                          "#BFFF00"
		                          "#00FF00";green
		                          "#00FFFF";
		                          "#0088FF"
		                          "#0000FF";blue
		                          "#5F00FF"
		                          "#8B00FF";purple
		                          "#CF00FF"
		                          "#FF0088"
		                          ))
(setq rainbow-cursor-color-pointer 1)
(defun cursor-color-change ()
  "Take a color from `rainbow-color-list' by the pointer.
The pointer moves by +1, and restore by taking mod.  "
  (setq rainbow-cursor-color-pointer (% (1+ rainbow-cursor-color-pointer)
				                        (length rainbow-cursor-color-list)))
  (set-cursor-color (nth rainbow-cursor-color-pointer
		                 rainbow-cursor-color-list)))

(run-with-timer ()
		        (/ .5 (length rainbow-cursor-color-list))
		        'cursor-color-change)
    #+end_src

** scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      ;; scroll-margin 2
      ;; hscroll-step 2
      ;; hscroll-margin 2
      scroll-conservatively 10000)
;;      scroll-preserve-screen-position 'always
(pixel-scroll-precision-mode 1)
#+END_SRC

#+RESULTS:
: t

** indent
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(defun adjust-languages-indent (n)
  (setq-local c-basic-offset n)

  (setq-local coffee-tab-width n)
  (setq-local javascript-indent-level n)
  (setq-local js-indent-level n)
  (setq-local js2-basic-offset n)

  (setq-local web-mode-attr-indent-offset n)
  (setq-local web-mode-attr-value-indent-offset n)
  (setq-local web-mode-code-indent-offset n)
  (setq-local web-mode-css-indent-offset n)
  (setq-local web-mode-markup-indent-offset n)
  (setq-local web-mode-sql-indent-offset n)

  (setq-local css-indent-offset n))

(dolist (hook (list
               'c-mode-hook
               'c++-mode-hook
               'java-mode-hook
               'haskell-mode-hook
               'asm-mode-hook
               'sh-mode-hook
               'haskell-cabal-mode-hook
               'ruby-mode-hook
               'qml-mode-hook
               'scss-mode-hook
               'coffee-mode-hook
               ))
  (add-hook hook #'(lambda ()
                     (setq indent-tabs-mode nil)
                     (adjust-languages-indent 4)
                     )))

(dolist (hook (list
               'web-mode-hook
               'js-mode-hook
               ))
  (add-hook hook #'(lambda ()
                     (setq indent-tabs-mode nil)
                     (adjust-languages-indent 2)
                     )))

#+end_src

#+RESULTS:

** keybinding (navigation, etc.)
#+begin_src emacs-lisp
;;learn from lazy-cat's thing-edit and move-text
(global-set-key "\M-i" 'other-window)
(global-set-key "\C-r" 'query-replace)

(global-set-key (kbd "M-l") (lambda (ARG) (interactive "p") (downcase-word (- ARG))))
(global-set-key (kbd "M-u") (lambda (ARG) (interactive "p") (upcase-word (- ARG))))
(global-set-key (kbd "M-c") (lambda (ARG) (interactive "p") (capitalize-word (- ARG))))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)

;; ;; (defun tl/exchange-keys ()
;;   "exchange some keys' behaviour, like '1' will ouput '!', '!' output '1'"
;;   (interactive)
;;   (global-set-key (kbd "1") (lambda () (interactive) (insert "!")))
;;   (global-set-key (kbd "4") (lambda () (interactive) (insert "$")))
;;   (global-set-key (kbd "!") (lambda () (interactive) (insert "1")))
;;   (global-set-key (kbd "$") (lambda () (interactive) (insert "4")))
;;   )
;;     (add-hook 'after-init-hook 'tl/exchange-keys)
#+end_src

** keyboard input method
*** pyim
#+begin_src elisp
(use-package pyim)
(pyim-default-scheme 'quanpin)
(if (posframe-workable-p)
    (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup))
(setq pyim-page-length 9)
(setq pyim-indicator-list (list #'pyim-indicator-with-posframe))

(use-package pyim-basedict)
(pyim-basedict-enable)

(setq default-input-method "pyim")
;; slow down pyim init speed.
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/pyim-greatdict")
;; (require 'pyim-greatdict)
;; (pyim-greatdict-enable)
#+end_src

#+RESULTS:
: pyim

** server
#+begin_src emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+end_src

* RECALL the structure of our magic array
** ORG
*** org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . visual-line-mode)
  :custom
  (org-directory "~/org/")
  (org-default-notes-file (expand-file-name "notes.org" org-directory))
  ;; prettify
  (org-startup-indented t)
  (org-fontify-todo-headline t)
  (org-fontify-done-headline t)
  (org-fontify-whole-heading-line t)
  (org-fontify-quote-and-verse-blocks t)
  (org-list-demote-modify-bullet '(("+" . "-") ("1." . "a.") ("-" . "+")))
  ;; image
  (org-image-actual-width nil)
  (org-display-remote-inline-images 'cache)
  ;; more user-friendly
  (org-clone-delete-id t)
  (org-use-sub-superscripts '{})
  (org-yank-adjusted-subtrees t)
  (org-catch-invisible-edits 'smart)
  (org-insert-heading-respect-content t)
  ;; call C-c C-o explicitly
  (org-return-follows-link nil)
  ;; todo
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELLED(c@/!)")))

  (org-todo-keyword-faces '(("TODO"       :foreground "#feb24c" :weight bold)
                            ("DONE"       :foreground "#50a14f" :weight bold)
                            ("CANCELLED"  :foreground "#ff6480" :weight bold)))
  (org-use-fast-todo-selection 'auto)   ;expert
  (org-enforce-todo-dependencies nil)
  (org-enforce-todo-checkbox-dependencies t)
  (org-priority-faces '((?A :foreground "red")
                        (?B :foreground "orange")
                        (?C :foreground "yellow")))
  (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                           ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                           ("STYLE_ALL" . "habit")))
  (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
  ;; Remove CLOSED: [timestamp] after switching to non-DONE states
  (org-closed-keep-when-no-todo t)      ;wt
  ;; log
  (org-log-repeat 'time)
  (org-log-into-drawer t)
  ;; tags, e.g. #+TAGS: keyword in your file
  (org-use-tag-inheritance nil)
  ;; (org-use-fast-tag-selection t)        ;wt
  ;; (org-fast-tag-selection-single-key t)
  ;; archive
  ;; (org-archive-location "%s_archive::datetree/")
  ;; id
  ;; (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  ;; abbreviation for url
  (org-link-abbrev-alist '(("GitHub" . "https://github.com/") ;wt
                           ("GitLab" . "https://gitlab.com/")
                           ("Google" . "https://google.com/search?q=")
                           ("RFCs"   . "https://tools.ietf.org/html/")
                           ("LWN"    . "https://lwn.net/Articles/")
                           ("WG21"   . "https://wg21.link/"))))


#+end_src

*** outfit
**** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭")
        org-ellipsis " ▼"))

  #+END_SRC

**** cycle
#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab t
  org-cycle-global-at-bob t
  )

(require 'org-tempo)

#+END_SRC

*** agenda
#+begin_src emacs-lisp
(setq org-agenda-include-diary nil)
  ;; (org-agenda-files (list (expand-file-name "tasks.org" org-directory)))
  ;; (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  ;; (org-agenda-insert-diary-extract-time t)
  ;; (org-agenda-inhibit-startup t)
  ;; (org-agenda-time-leading-zero t)
  ;; (org-agenda-remove-tags t)
  ;; (org-agenda-columns-add-appointments-to-effort-sum t)
  ;; (org-agenda-restore-windows-after-quit t)
  ;; (org-agenda-window-setup 'current-window)

#+end_src

#+RESULTS:

*** export
#+BEGIN_SRC emacs-lisp
(use-package htmlize)

(with-eval-after-load 'org
  (setq org-odt-preferred-output-format "docx") ;ODT转换格式默认为docx
  (setq org-startup-folded nil)                 ;默认展开内容

  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory lazycat-emacs-root-dir)
                                 (file-name-as-directory "template")
                                 "template.docx")))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file))))

;; (use-package ox-reveal
;;   :commands (org-reveal)
;;   :init
;;   (add-hook 'after-init-hook #'org-reveal)
;;   :config
;;   (setq org-reveal-root "~/.reveal.js"
;;    org-reveal-theme "moon"
;;    org-reveal-plugins '(classList markdown zoom notes)
;;    ))

(setq org-export-headline-levels 1
      org-export-with-broken-links 'mark
      org-export-with-section-numbers nil
      org-html-checkbox-type 'html
      org-html-doctype "html5"
      org-html-html5-fancy t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
 #+END_SRC

 #+RESULTS:
 | ( color) | ( listings) | \usepackage{ctex} |
*** org-src
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map "\C-c\C-c" 'org-edit-src-exit)
(setq org-edit-src-content-indentation 0
      org-confirm-babel-evaluate nil)
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (C          . t)
                               (python     . t)
                               (shell      . t)
                               (latex      . t)
                               (dot        . t)
                               ))
 #+END_SRC

 #+RESULTS:

*** mouse
#+begin_src emacs-lisp
(setq org-mouse-features '(activate-checkboxes))
#+end_src
** structured text(md, rst)
#+begin_src emacs-lisp
;; Pixel alignment for org/markdown tables
(use-package valign
  :ensure t
  :hook ((markdown-mode org-mode) . valign-mode))

;; The markdown mode is awesome! unbeatable
(use-package markdown-mode
  :ensure t
  :init
  (advice-add #'markdown--command-map-prompt :override #'ignore)
  (advice-add #'markdown--style-map-prompt   :override #'ignore)
  :mode ("README\\(?:\\.md\\)?\\'" . gfm-mode)
  :hook (markdown-mode . visual-line-mode)
  :bind (:map markdown-mode-style-map
         ("r" . markdown-insert-ruby-tag)
         ("d" . markdown-insert-details))
  :config
  (defun markdown-insert-ruby-tag (text ruby)
    "Insert ruby tag with `TEXT' and `RUBY' quickly."
    (interactive "sText: \nsRuby: \n")
    (insert (format "<ruby>%s<rp>(</rp><rt>%s</rt><rp>)</rp></ruby>" text ruby)))

  (defun markdown-insert-details (title)
    "Insert details tag (collapsible) quickly."
    (interactive "sTitle: ")
    (insert (format "<details><summary>%s</summary>\n\n</details>" title)))
  :custom
  (markdown-header-scaling t)
  (markdown-enable-wiki-links t)
  (markdown-italic-underscore t)
  (markdown-asymmetric-header t)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-fontify-code-blocks-natively t))

;; ReStructuredText
(use-package rst
  :ensure nil
  :hook ((rst-mode . visual-line-mode)
         (rst-adjust . rst-toc-update)))

#+end_src

#+RESULTS:
| rst-toc-update |
** latex
#+begin_src emacs-lisp

#+end_src
** dired
#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t
      dired-auto-revert-buffer #'dired-directory-changed-p
      dired-hide-details-hide-symlink-targets nil)
(setq dired-listing-switches "-AFhlv")  ;wt

;; Make dired colorful
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))


#+end_src

#+RESULTS:
| diredfl-mode | diff-hl-dired-mode-unless-remote |

** project and file's magic
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap ("C-c p" . projectile-command-map)
  :config
  (dolist (dir '("bazel-bin"            ;what's this?
                 "bazel-out"
                 "bazel-testlogs"))
    (add-to-list 'projectile-globally-ignored-directories dir))
  :custom
  (projectile-use-git-grep t)
  (projectile-indexing-method 'alien)   ;default is alien
  )


(use-package ripgrep)

#+END_SRC

** cc mode
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook 'c-toggle-auto-hungry-state)
;;(remove-hook 'c-mode-common-hook 'cc-mode)

;; A compiler output viewer
(use-package rmsbolt
  :commands rmsbolt-compile
  :custom
  (rmsbolt-asm-format nil)
  (rmsbolt-default-directory "/tmp"))

;; Parser generator
(use-package bison-mode)

;; cmake, the de factor build system for C++
(use-package cmake-mode)

;; Extra font locks for cmake
(use-package cmake-font-lock
  :hook (cmake-mode cmake-font-lock-activate))

(dolist (hook (list
               'c-mode-hook
               'c++-mode-hook
               'c-mode-common-hook
               ))
  (add-hook hook #'(lambda ()
                     (require 'cc-mode)
                     (require 'modern-cpp-font-lock)

                     (defun c-mode-style-setup ()
                       (interactive)
                       ;; cpp font lock.
                       (modern-c++-font-lock-global-mode t)

                       ;; base-style
                       (c-set-style "stroustrup")

                       ;; qt keywords and stuff ...
                       ;; set up indenting correctly for new qt kewords
                       (setq c-protection-key (concat "\\<\\(public\\|public slot\\|protected"
                                                      "\\|protected slot\\|private\\|private slot"
                                                      "\\)\\>")
                             c-C++-access-key (concat "\\<\\(signals\\|public\\|protected\\|private"
                                                      "\\|public slots\\|protected slots\\|private slots"
                                                      "\\)\\>[ \t]*:"))
                       (progn
                         ;; modify the colour of slots to match public, private, etc ...
                         (font-lock-add-keywords 'c++-mode
                                                 '(("\\<\\(slots\\|signals\\)\\>" . font-lock-type-face)))
                         ;; make new font for rest of qt keywords
                         (make-face 'qt-keywords-face)
                         (set-face-foreground 'qt-keywords-face "DeepSkyBlue1")
                         ;; qt keywords
                         (font-lock-add-keywords 'c++-mode
                                                 '(("\\<Q_OBJECT\\>" . 'qt-keywords-face)))
                         (font-lock-add-keywords 'c++-mode
                                                 '(("\\<SIGNAL\\|SLOT\\>" . 'qt-keywords-face)))
                         (font-lock-add-keywords 'c++-mode
                                                 '(("\\<Q[A-Z][A-Za-z]\\>" . 'qt-keywords-face)))
                         ))
                     (c-mode-style-setup))))
#+end_src

#+RESULTS:

** lisp
#+begin_src emacs-lisp
;; elisp
(defconst eval-as-comment-prefix ";;=> ")
;; Imitate scala-mode
;; from https://github.com/dakra/dmacs
(defun eval-to-comment (&optional arg)
  (interactive "P")
  (let ((start (point)))
    (eval-print-last-sexp arg)
    (save-excursion
      (goto-char start)
      (save-match-data
        (re-search-forward "[[:space:]\n]+" nil t)
        (insert eval-as-comment-prefix)))))

(define-key emacs-lisp-mode-map "\C-c\C-b" 'eval-buffer)
(define-key emacs-lisp-mode-map "\C-c\C-c" 'eval-to-comment)
(define-key lisp-interaction-mode-map "\C-c\C-c" 'eval-to-comment)


(use-package ielm
  :ensure nil
  :hook (ielm-mode . company-mode))


#+end_src

#+RESULTS:
| company-mode |

** python
#+begin_src emacs-lisp
(use-package python
  :custom
  (python-indent-guess-indent-offset-verbose nil))

;; python -m venv ENV_DIR
(use-package pyvenv
  :commands pyvenv-deactivate pyvenv-deactivate)


#+end_src

#+RESULTS:

** haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :hook ((haskell-mode . haskell-indentation-mode)
         (haskell-mode . haskell-doc-mode))
  :custom
  (haskell-completing-read-function 'completing-read)
  (haskell-process-check-cabal-config-on-load nil)
  (haskell-process-suggest-add-package nil)
  (haskell-process-suggest-hoogle-imports nil)
  (haskell-process-suggest-language-pragmas nil)
  (haskell-process-suggest-overloaded-strings nil)
  (haskell-process-suggest-restart nil))


#+end_src

#+RESULTS:
| haskell-doc-mode | haskell-indentation-mode |

** rust
#+begin_src emacs-lisp
(use-package rust-mode
  :defines lsp-rust-server
  :config
  ;; Prefer `rust-analyzer' over `rls'
  (with-eval-after-load 'lsp-mode
    (when (executable-find "rust-analyzer")
      (setq lsp-rust-server 'rust-analyzer)))
  :custom
  (rust-format-on-save (executable-find "rustfmt")))

;; Cargo integration
(use-package cargo
  :ensure t
  :hook (rust-mode . cargo-minor-mode))
#+end_src

#+RESULTS:
| cargo-minor-mode | rust-maybe-initialize-buffer-project |

** other modes
#+begin_src emacs-lisp
(use-package fish-mode)
(use-package lox-mode)
(use-package php-mode)
(use-package crontab-mode)
(use-package graphviz-dot-mode)
(use-package json-mode)
(use-package csharp-mode)
;;  (use-package pdf-tools)

;;  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
;;  (require 'css-sort-buffer)

#+end_src

#+RESULTS:

** www
#+begin_src emacs-lisp
(use-package eww
  :config
  (defun eww-open-this-file ()
    (interactive)
    (if (buffer-file-name)
        (eww-open-file (buffer-file-name))
      (call-interactively 'eww))))

#+end_src

#+RESULTS:
: t

** games
#+begin_src emacs-lisp
(use-package figlet
  :defer t)
(use-package speed-type
  :defer t)
(use-package zone-nyan
  :defer t)
(use-package autotetris-mode
  :defer t)
(use-package flames-of-freedom
  :defer t)

#+end_src

#+RESULTS:

* casting magic
** our loyal assistent carrying all our books
#+begin_src emacs-lisp
(use-package xref
  :init
  ;; On Emacs 28, `xref-search-program' can be set to `ripgrep'.
  ;; `project-find-regexp' benefits from that.
  (setq xref-search-program 'ripgrep)
  (setq xref-show-xrefs-function #'xref-show-definitions-completing-read)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  :hook ((xref-after-return xref-after-jump) . recenter))

(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate t)
  :bind (("M-g j" . dumb-jump-go)
         ("M-g J" . dumb-jump-go-other-window))
  :custom
  (dumb-jump-quiet t)
  (dumb-jump-aggressive t)
  (dumb-jump-selector 'completing-read))

(use-package tree-sitter)
(use-package tree-sitter-langs)
(require 'tree-sitter-hl)
(require 'tree-sitter-debug)
(require 'tree-sitter-query)

;;; Code:
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
(use-package citre
  :init
  (require 'citre-config)
  (global-set-key (kbd "M-.") 'citre-ace-peek)
  (global-set-key (kbd "M-,") 'citre-peek-restore)
  :bind (("C-c d c" . citre-update-this-tags-file))
  :custom
  (citre-prompt-language-for-ctags-command t)
  (citre-ctags-program (executable-find "ctags"))
  (citre-readtags-program (executable-find "readtags"))
  :config
  (setq
   citre-project-root-function #'projectile-project-root
   citre-default-create-tags-file-location 'global-cache
   citre-use-project-root-when-creating-tags t
   citre-prompt-language-for-ctags-command t
   )

  (defun citre-jump+ ()
    (interactive)
    (condition-case _
        (citre-jump)
      (error (let* ((xref-prompt-for-identifier nil))
               (call-interactively #'xref-find-definitions)))))
  )

;; Browse devdoc.io
(use-package devdocs
  :ensure t
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex)))))

(use-package marginalia
  :config
  (marginalia-mode))

;; persist history over emacs restarts.
(use-package savehist
  :init (savehist-mode))

;; Insert SPDX license header
;; (use-package spdx
;;   :hook (prog-mode . spdx-tempo-setup)
;;   :custom
;;   (spdx-ignore-deprecated t))
;; tldr man info

(use-package tldr)

;; I would use grep for searching TODO

;; I will not enable whitespace-mode. I only need a tool that automaticly remove spaces, but keep the spaces around my cursor for about five lines to not disturb typing.

;; a tool for hiding code blocks is `hideshow'
#+end_src

#+RESULTS:

** choosing your lyrics
*** lsp
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/lsp-bridge/")
(use-package corfu)
(require 'cape)
(require 'lsp-bridge)
(require 'lsp-bridge-orderless) ;; make lsp-bridge support fuzzy match, optional
(require 'lsp-bridge-icon) ;; show icon for completion items, optional

;;(require 'tabnine-capf)

;;; Code:

;; (lazy-load-set-keys
;;  '(
;;    ("M-h" . corfu-complete)
;;    ("M-." . corfu-first)
;;    ("M-," . corfu-last)
;;    )
;;  corfu-map)

;; (custom-set-faces
;;  '(corfu-default ((t (:height 1.3)))))

;; (setq lsp-bridge-enable-log t)

(add-to-list 'completion-at-point-functions #'cape-symbol)
(add-to-list 'completion-at-point-functions #'cape-file)
(add-to-list 'completion-at-point-functions #'cape-dabbrev)

(dolist (hook (list
               'emacs-lisp-mode-hook
               ))
  (add-hook hook (lambda ()
                   (setq-local corfu-auto t) ; Elisp
                   )))

;;
(defun lsp-bridge-mix-multi-backends ()
  (setq-local completion-category-defaults nil)
  (setq-local completion-at-point-functions
              (list
               (cape-capf-buster
                (cape-super-capf
                 #'lsp-bridge-capf

                 #'cape-file
                 #'cape-dabbrev
                 )
                'equal)
               )))


(dolist (hook lsp-bridge-default-mode-hooks)
  (add-hook hook (lambda ()
                   (setq-local corfu-auto nil) ;
                   (lsp-bridge-mode 1)         ;
                   (lsp-bridge-mix-multi-backends) ;
                   )))

(defun lsp-bridge-jump ()
  (interactive)
  (cond
   ((eq major-mode 'emacs-lisp-mode)
    (let ((symb (function-called-at-point)))
      (when symb
        (find-function symb))))
   (lsp-bridge-mode
    (lsp-bridge-find-def))
   (t
    (require 'dumb-jump)
    (dumb-jump-go))))

(defun lsp-bridge-jump-back ()
  (interactive)
  (cond
   (lsp-bridge-mode
    (lsp-bridge-return-from-def))
   (t
    (require 'dumb-jump)
    (dumb-jump-back))))


(global-corfu-mode)

(provide 'init-lsp-bridge)
#+end_src

#+RESULTS:
: init-lsp-bridge

*** yas
#+begin_src emacs-lisp
(use-package yasnippet)
(add-hook 'prog-mode-hook
          #'(lambda ()
              (require 'yasnippet)

              (defun get-git-user-name ()
                (interactive)
                (replace-regexp-in-string "\n$" "" (shell-command-to-string "git config --get user.name")))

              (defun get-git-user-email ()
                (interactive)
                (replace-regexp-in-string "\n$" "" (shell-command-to-string "git config --get user.email")))

              (add-to-list `yas/root-directory (concat lazycat-emacs-root-dir "/snippets"))
              (yas-global-mode 1)

              ;; Disable yasnippet mode on some mode.
              (dolist (hook (list
                             'term-mode-hook
                             ))
                (add-hook hook #'(lambda () (yas-minor-mode -1))))
              ))

#+end_src

#+RESULTS:
| (lambda nil (require 'yasnippet) (defun get-git-user-name nil (interactive) (replace-regexp-in-string |

*** documentation
#+begin_src emacs-lisp
(use-package separedit
  :bind (:map prog-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'markdown-mode)
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-continue-fill-column t)
  (separedit-buffer-creation-hook #'auto-fill-mode))


#+end_src

#+RESULTS:
: separedit
*** pastebin service
#+begin_src emacs-lisp
(use-package webpaste
  :ensure t
  :commands webpaste-paste-buffer-or-region
  :custom
  (webpaste-open-in-browser t)
  (webpaste-paste-confirmation t)
  (webpaste-add-to-killring nil)
  (webpaste-provider-priority '("paste.mozilla.org" "dpaste.org" "ix.io")))

#+end_src
*** language difference(web search &web translate)
#+begin_src emacs-lisp
;; Web search
(use-package webjump
  :ensure nil
  ;; C-c / will be shadowed by `org-sparse-tree' in org-mode
  :bind ("C-c C-/" . webjump)
  :custom
  (webjump-sites '(;; Internet search engines.
                   ("Google" .
                    [simple-query "www.google.com"
                                  "www.google.com/search?q=" ""])
                   ("Wikipedia" .
                    [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""])
                   ("Ludwig Guru" .
                    [simple-query "ludwig.guru" "ludwig.guru/s/" ""])
                   ("Stack Overflow" .
                    [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
                   ("Man Search" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" ""])
                   ("Man Go" .
                    [simple-query "archlinux.org" "man.archlinux.org/search?q=" "&go=Go"])

                   ;; Language specific engines.
                   ("x86 Instructions Reference" .
                    [simple-query "www.felixcloutier.com"
                                  "www.felixcloutier.com/x86/" ""]))))

;; Translator for Emacs
;; M-x fanyi-dwim{,2}, that's all.
(use-package fanyi
  :ensure t
  :commands fanyi-dwim fanyi-dwim2)

(use-package youdao-dictionary
  :bind (("M-s" . youdao-dictionary-search-at-point+)))


#+end_src

** step by step we strengthen our spell
*** magit
#+begin_src emacs-lisp
(use-package magit
;;  :hook (git-commit-setup . git-commit-turn-on-flyspell)
  :custom
  (magit-diff-refine-hunk t)            ;what's this?
  (magit-diff-paint-whitespace nil)
  )

(setq magit-commit-ask-to-stage nil)    ;don't ask stage question

(use-package vc
  :custom
  (vc-follow-symlinks t)
  (vc-allow-async-revert t)
  (vc-handled-backends '(Git)))

;; useless and disturbing
;; Highlight uncommitted changes using VC
;; (use-package diff-hl
;;   :ensure t
;;   :hook ((after-init         . global-diff-hl-mode)
;;          (dired-mode         . diff-hl-dired-mode-unless-remote)
;;          (magit-pre-refresh  . diff-hl-magit-pre-refresh)
;;          (magit-post-refresh . diff-hl-magit-post-refresh))
;;   :config
;;   ;; When Emacs runs in terminal, show the indicators in margin instead.
;;   (unless (display-graphic-p)
;;     (diff-hl-margin-mode)))

;; Visual diff interface
(use-package ediff                ;what's this?
  ;; Restore window config after quitting ediff
  :hook ((ediff-before-setup . ediff-save-window-conf)
         (ediff-quit         . ediff-restore-window-conf))
  :config
  (defvar local-ediff-saved-window-conf nil)

  (defun ediff-save-window-conf ()
    (setq local-ediff-saved-window-conf (current-window-configuration)))

  (defun ediff-restore-window-conf ()
    (when (window-configuration-p local-ediff-saved-window-conf)
      (set-window-configuration local-ediff-saved-window-conf)))
  :custom
  (ediff-highlight-all-diffs t)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-horizontally))

;; will this be influenced by ping?
(use-package browse-at-remote
  :bind (:map vc-prefix-map
         ("b" . bar-browse)         ;; was `vc-switch-backend'
         ("c" . bar-to-clipboard))
  :custom
  (browse-at-remote-add-line-number-if-no-region-selected nil))

;; Setup gitignore mode
(use-package conf-mode
  :ensure nil
  :mode (("\\.gitignore\\'"     . conf-unix-mode)
         ("\\.gitconfig\\'"     . conf-unix-mode)
         ("\\.gitattributes\\'" . conf-unix-mode)))


#+end_src

#+RESULTS:
: ((\.gitattributes\' . conf-unix-mode) (\.gitconfig\' . conf-unix-mode) (\.gitignore\' . conf-unix-mode) (\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\'\) . json-mode) (README\(?:\.md\)?\' . gfm-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.jison\' . jison-mode) (\.l\' . flex-mode) (\.y\' . bison-mode) (\.cmake\' . cmake-mode) (CMakeLists\.txt\' . cmake-mode) (/crontab\(\.X*[[:alnum:]]+\)?\' . crontab-mode) (\.cs\' . csharp-mode) (/fish_funced\..*\' . fish-mode) (\.fish\' . fish-mode) (\.gv\' . graphviz-dot-mode) (\.dot\' . graphviz-dot-mode) (\.hsc\' . haskell-mode) (\.l[gh]s\' . haskell-literate-mode) (\.hsig\' . haskell-mode) (\.[gh]s\' . haskell-mode) (\.cabal\'\|/cabal\.project\|/\.cabal/config\' . haskell-cabal-mode) (\.chs\' . haskell-c2hs-mode) (\.ghci\' . ghci-script-mode) (\.dump-simpl\' . ghc-core-mode) (\.hcr\' . ghc-core-mode) (\.lox\' . lox-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.\(?:php[s345]?\|phtml\)\' . php-mode-maybe) (\.\(?:php\.inc\|stub\)\' . php-mode) (/\.php_cs\(?:\.dist\)?\' . php-mode) (\.rs\' . rust-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** see the power of spell
*** compile
#+begin_src emacs-lisp
;; Compilation Mode
(use-package compile
  :ensure nil
  :hook (compilation-filter . colorize-compilation-buffer)
  :config
  (defun colorize-compilation-buffer ()
    "ANSI coloring in compilation buffers."
    (with-silent-modifications
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  :custom
  (compilation-always-kill t)
  (compilation-scroll-output t)
  ;; Save all buffers on M-x `compile'
  (compilation-ask-about-save nil))


#+end_src

*** quickrun
#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  )

#+end_src

*** flycheck
#+BEGIN_SRC emacs-lisp
;; flycheck
(use-package flycheck)
;;   :hook (prog-mode . flycheck-mode)
;;   :custom
;;   (flycheck-temp-prefix ".flycheck")
;;   (flycheck-emacs-lisp-load-path 'inherit)
;;   (flycheck-indication-mode 'left-fringe)
;;   (flycheck-idle-change-delay 1)
;;   )

(use-package flycheck-posframe)
;; I don't like `global-flycheck-mode', some mode, such as elisp mode don't need.
(dolist (hook (list
               'c-mode-common-hook
               'ruby-mode-hook
               'python-mode-hook
               'swift-mode-hook
               'go-mode-hook
               'js-mode-hook
               ))
  (add-hook
   hook
   #'(lambda ()
       ;; OS Config
       (when (featurep 'cocoa)
         ;; Initialize environment from user's shell to make eshell know every PATH by other shell.
         (require 'exec-path-from-shell)
         (setq exec-path-from-shell-variables '("PATH" "MANPATH" "GEM_PATH"))
         (exec-path-from-shell-initialize))

       (require 'flycheck)

       (setq-default flycheck-disabled-checkers ;disable json-jsonlist checking for json files
                     (append flycheck-disabled-checkers
                             '(json-jsonlist)))

       (setq-default flycheck-disabled-checkers ;disable jshint since we prefer eslint checking
                     (append flycheck-disabled-checkers
                             '(javascript-jshint)))

       (flycheck-add-mode 'javascript-eslint 'web-mode) ;use eslint with web-mode for jsx files

       (setq-default flycheck-temp-prefix ".flycheck")

       (with-eval-after-load 'flycheck
         (require 'flycheck-posframe)
         (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
       (flycheck-mode 1))))

;; Add flycheck for swift.
(add-hook 'swift-mode-hook
          #'(lambda ()
              (require 'flycheck-swift)
              (flycheck-swift-setup)
              ))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (when (featurep 'cocoa) (require 'exec-path-from-shell) (setq exec-path-from-shell-variables '(PATH MANPATH GEM_PATH)) (exec-path-from-shell-initialize))       | (require 'flycheck)    | (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(json-jsonlist)))         | (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))         | (flycheck-add-mode 'javascript-eslint 'web-mode) | (setq-default flycheck-temp-prefix .flycheck)         | (with-eval-after-load 'flycheck (require 'flycheck-posframe) (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))           | (flycheck-mode 1) |
  | lambda | nil | (require 'flycheck-swift)                                                                                                                                       | (flycheck-swift-setup) |                                                                                                        |                                                                                                            |                                                  |                                                       |                                                                                                                                 |                   |
  | lambda | nil | (if (featurep 'cocoa) (progn (require 'exec-path-from-shell) (setq exec-path-from-shell-variables '(PATH MANPATH GEM_PATH)) (exec-path-from-shell-initialize))) | (require 'flycheck)    | (progn (set-default 'flycheck-disabled-checkers (append flycheck-disabled-checkers '(json-jsonlist)))) | (progn (set-default 'flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))) | (flycheck-add-mode 'javascript-eslint 'web-mode) | (progn (set-default 'flycheck-temp-prefix .flycheck)) | (eval-after-load 'flycheck #'(lambda nil (require 'flycheck-posframe) (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))) | (flycheck-mode 1) |
